<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cecina Babich Morrow</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Cecina Babich Morrow</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2020</copyright><lastBuildDate>Thu, 23 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Cecina Babich Morrow</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Scheduling R Scripts</title>
      <link>/post/launchd-jobs/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/launchd-jobs/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;Since starting my job as a data scientist, I found myself setting dozens of reminders on my calendar to run certain scripts every day / week / month. I figured that there had to be a better way to deal with this, and after some research, I started off with creating cron jobs. After a few months of these running (with varying success), I learned about Launchd as well. This post will explain my process for using both of these scheduling tools to run R scripts at scheduled times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cron&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cron&lt;/h2&gt;
&lt;p&gt;Cron is a utility in Unix-like operating systems that can schedule a command to run automatically at a scheduled time. Cron is driven by a crontab file, so in order to schedule an R script, I needed to create a crontab file. Each line of a crontab file has the following syntax:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any of the time arguments that are left as &lt;code&gt;*&lt;/code&gt; are treated as a wildcard, so if you schedule &lt;code&gt;20 10 3 * * command to execute&lt;/code&gt;, that command will run at 10:20 on the 3rd of every month.&lt;/p&gt;
&lt;p&gt;Beyond figuring out the timing of your job, you also need to figure out what command to execute. Since my work is primarily in R, I wanted to figure out how to execute an R script via cron. If the script in question can be found at &lt;code&gt;/Desktop/my_script.R&lt;/code&gt;, for example, the command will be:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;/usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test this by running just this command in Terminal (without worrying about cron yet) and seeing if your script runs.&lt;/p&gt;
&lt;p&gt;So now, you can assemble the syntax for the cron job. If you want &lt;code&gt;myscript.R&lt;/code&gt; to run at 10:20 on the 3rd of every month, the cron syntax will be:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;20 10 3 * * /usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check your syntax using &lt;a href=&#34;https://crontab-generator.org/&#34;&gt;this handy website&lt;/a&gt;, which helps you generate the proper cron syntax given a desired schedule and script.&lt;/p&gt;
&lt;p&gt;Once you have your script running and the syntax ready for the schedule you want, you are ready to edit the crontab on your computer. To do so, open up Terminal and run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you type &lt;code&gt;i&lt;/code&gt;, you will enter insert mode, and you can paste your cron sytax into the file. When you are done editing, hit &lt;code&gt;ESC&lt;/code&gt; and then type &lt;code&gt;:wq&lt;/code&gt; to save and quit.&lt;/p&gt;
&lt;div id=&#34;emailing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Emailing&lt;/h3&gt;
&lt;p&gt;When I created my first cron job, I was pretty skeptical about the likelihood of it actually running when scheduled, so I wanted to add the ability to get an email about the script’s progress. To do that, you can add to the &lt;code&gt;MAILTO&lt;/code&gt; option, so your crontab would look like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;MAILTO=&amp;quot;myemail@email.com;mybackupemail@gmail.com&amp;quot;
20 10 3 * * /usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will email you on successful runs of the script as well as errors, so if your script is set up to run hourly, you might not want all those emails. &lt;a href=&#34;https://stevenmortimer.com/automating-r-scripts-with-cron/&#34;&gt;This blog post&lt;/a&gt; includes lots of additional helpful information about automating R scripts with cron, including how to receive emails for errors only.&lt;/p&gt;
&lt;p&gt;As far as my experiences with cron go, I did not always receive the emails, even if the script did in fact run properly. I seemed to only receive the emails while I was at work, not at home (no idea why that happened or if there was any causal reason for it). Beyond this weirdness, the main issue with cron is that your jobs will not run if your computer is asleep at the scheduled time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;launchd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Launchd&lt;/h2&gt;
&lt;p&gt;After some of these various frustrations with cron, I learned that launchd is the preferred tool in macOS to execute scripts in a scheduled way. If your computer is asleep when the scheduled job is supposed to occur, the job will still run when your computer wakes up. (If your machine is off at the scheduled time, however, the job will not run until the next scheduled time.) There’s a lot I don’t understand about launchd (for a great overview, check &lt;a href=&#34;https://medium.com/swlh/how-to-use-launchd-to-run-services-in-macos-b972ed1e352&#34;&gt;this Medium article&lt;/a&gt;), but I broke the process down into 3 steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a shell script to execute the R script&lt;/li&gt;
&lt;li&gt;Create a .plist file to schedule the running of the shell script&lt;/li&gt;
&lt;li&gt;Load the job&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;create-the-shell-script&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create the shell script&lt;/h3&gt;
&lt;p&gt;The shell script is basically going to look exactly the same as the command you would have used for the cron job. I saved these scripts in the &lt;code&gt;~/&lt;/code&gt; directory, although you can probably save them anywhere as long as you keep track of the paths. The shell script should look something like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh
/usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line &lt;code&gt;#!/bin/sh&lt;/code&gt; tells Unix how the file is supposed to be executed.&lt;/p&gt;
&lt;p&gt;Then run the following in terminal to make the shell file runnable:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;chmod +x launchd_shell_script.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-.plist-file&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a .plist file&lt;/h3&gt;
&lt;p&gt;The .plist files that launchd uses are special XML files that allow you to specify the script to run and the schedule to run it on. I followed the following syntax for my .plist files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;!-- Should be the same as the filename without the extension --&amp;gt;
    &amp;lt;string&amp;gt;com.mylaunchjob&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;~/launchd_shell_script.sh&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;!-- Schedule regular runs --&amp;gt;
    &amp;lt;key&amp;gt;StartCalendarInterval&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;Hour&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;10&amp;lt;/integer&amp;gt;
        &amp;lt;key&amp;gt;Minute&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;20&amp;lt;/integer&amp;gt;
        &amp;lt;key&amp;gt;Day&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;23&amp;lt;/integer&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some components to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first string contains the name of the launch job in question (so this job would be saved as &lt;code&gt;com.mylaunchjob.plist&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Within the array, you need to put the name of the shell script you just created&lt;/li&gt;
&lt;li&gt;You can put the arguments to schedule the job under &lt;code&gt;StartCalendarInterval&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Save your &lt;code&gt;.plist&lt;/code&gt; file as &lt;code&gt;~/Library/LaunchAgents/com.mylaunchjob.plist&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-the-job&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load the job&lt;/h3&gt;
&lt;p&gt;The final step is to run the following command in Terminal:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;launchctl load ~/Library/LaunchAgents/com.mylaunchjob.plist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your job is now ready to go at the scheduled times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-launchd-resources&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Additional launchd resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://willchernoff.com/2013/04/23/periodically-run-an-r-script-as-a-background-process-using-launchd-under-osx/&#34;&gt;Running RScripts using launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;General article about &lt;a href=&#34;https://nathangrigg.com/2012/07/schedule-jobs-using-launchd&#34;&gt;scheduling jobs using launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/how-to-use-launchd-to-run-services-in-macos-b972ed1e352&#34;&gt;Introduction to launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://killtheyak.com/schedule-jobs-launchd/&#34;&gt;Friendly guide to .plist format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sad strategies: making really bad ideas work for you</title>
      <link>/talk/bio_on_tap_2020/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 -0500</pubDate>
      <guid>/talk/bio_on_tap_2020/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vSveyLXkk95ygnjAU88LiGlN0bdX0uq2IKJr6IiEEK0gzJW3QGeccFSi9B4640orw/embed?&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding featured images to posts</title>
      <link>/post/adding-featured-images-to-posts/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/adding-featured-images-to-posts/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;When I updated my website to the latest version of Hugo Academic a few months ago, I realized that I could add featured images to all of my blog posts. I was very excited about this, but none of my tinkering with the YAML of the RMarkdown could produce an image. After some digging, however, I was able to find how to format my files properly so the Academic theme worked to create the images.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;folder-structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Folder structure&lt;/h2&gt;
&lt;p&gt;Hugo Academic follows a particular folder structure and naming conventions. When I am adding or editing blog posts, for example, I do that within the &lt;code&gt;/content/post&lt;/code&gt; folder. Inside that folder, there is a &lt;code&gt;_index.md&lt;/code&gt; file with a YAML header, and then an array of posts. You can put the &lt;code&gt;.Rmd&lt;/code&gt; or &lt;code&gt;.md&lt;/code&gt; files directly inside &lt;code&gt;post&lt;/code&gt;, so the file path would look something like &lt;code&gt;/content/post/my_post.Rmd&lt;/code&gt;. If you use &lt;code&gt;blogdown&lt;/code&gt; to create posts from within RStudio, those posts will be created inside the &lt;code&gt;post&lt;/code&gt; folder in that way by default.&lt;/p&gt;
&lt;p&gt;In order to set up your post to use a featured image, however, you want the post inside a subsequent folder, like this &lt;code&gt;/content/post/my_post/&lt;/code&gt;. Within that folder, call your post &lt;code&gt;index.Rmd&lt;/code&gt; (or &lt;code&gt;index.md&lt;/code&gt; if it is a Markdown file). Then, you can add the image you want to that same folder and name it &lt;code&gt;featured.png&lt;/code&gt; / &lt;code&gt;featured.jpg&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;So now you have a set-up like this within &lt;code&gt;/content/post&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├── post
│   ├── my_post
│   │   ├── featured.png
│   │   ├── index.Rmd
│   │   └── index.html
    └── _index.md&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;yaml-header&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;YAML header&lt;/h2&gt;
&lt;p&gt;The final step is to modify the YAML header of your post (in &lt;code&gt;index.Rmd&lt;/code&gt;) to display the featured image as desired. Add the following to the YAML header:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image:
  placement: 1
  caption: &amp;#39;Your caption here.&amp;#39;
  focal_point: &amp;#39;&amp;#39;
  preview_only: false&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Hugo Academic, the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues/1175&#34;&gt;placement options&lt;/a&gt; are as follows: 1 = Full column width, 2 = Out-set, 3 = Screen-width (with 1 being the default). The focal point options are Smart, Center, TopLeft, Top, TopRight, Left, Right, BottomLeft, Bottom, BottomRight, although I haven’t played with those much.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Changing fonts in RMarkdown PDFs</title>
      <link>/post/changing-fonts-in-rmarkdown-pdfs/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/changing-fonts-in-rmarkdown-pdfs/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;After learning how to &lt;a href=&#34;https://babichmorrowc.github.io/post/2019-10-11-google_fonts/&#34;&gt;change the fonts within a graph&lt;/a&gt; in R, I wanted to be able to change the fonts in the body of an RMarkdown to match. I specifically wanted to be able to knit an RMarkdown to PDF using the &lt;a href=&#34;https://fonts.google.com/specimen/Source+Sans+Pro&#34;&gt;Source Sans Pro&lt;/a&gt; Google font, but these instructions should work for any Google font.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cairo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cairo&lt;/h2&gt;
&lt;p&gt;To embed custom fonts in PDFs, you can use the &lt;a href=&#34;https://www.cairographics.org/&#34;&gt;Cairo graphics library&lt;/a&gt;. This library is installed with R, but if you are using a Mac, you do need to install &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;XQuartz&lt;/a&gt;. To check if you are able to run Cairo, you can run &lt;code&gt;capabilities()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;capabilities()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        jpeg         png        tiff       tcltk         X11        aqua 
##        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE 
##    http/ftp     sockets      libxml        fifo      cledit       iconv 
##        TRUE        TRUE        TRUE        TRUE       FALSE        TRUE 
##         NLS     profmem       cairo         ICU long.double     libcurl 
##        TRUE        TRUE        TRUE        TRUE        TRUE        TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;cairo&lt;/code&gt; shows up as &lt;code&gt;TRUE&lt;/code&gt;, you are good to go.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;yaml-header&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;YAML header&lt;/h2&gt;
&lt;p&gt;To use Cairo to change the font of your RMarkdown pdf, you can modify the YAML heading:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;---
title: &amp;quot;New fancy font!&amp;quot;
  header-includes:
   - \usepackage[default]{sourcesanspro}
   - \usepackage[T1]{fontenc}
mainfont: SourceSansPro
output:
  pdf_document
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;\usepackage&lt;/code&gt; components of the header load Latex packages for your font (I am using Source Sans Pro in this example).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;chunk-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Chunk options&lt;/h2&gt;
&lt;p&gt;The final step to use the font in your knitted pdf is to set the graphical device to Cairo in your code chunk option. At the beginning of your RMarkdown, the first chunk should include code that looks something like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_chunk$set(echo = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add &lt;code&gt;dev=&#34;cairo_pdf&#34;&lt;/code&gt; as one of the arguments:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_chunk$set(echo = TRUE, dev=&amp;quot;cairo_pdf&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about other chunk options &lt;a href=&#34;https://yihui.org/knitr/options/#chunk_options&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>/tutorial/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/tutorial/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Putting Google Fonts in R graphs</title>
      <link>/post/2019-10-11-google-fonts/</link>
      <pubDate>Fri, 11 Oct 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-10-11-google-fonts/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;I’ve been working on creating a visualization cookbook for R graphics (check out &lt;a href=&#34;https://bbc.github.io/rcookbook/&#34;&gt;this great example&lt;/a&gt; from the BBC to see what I’m eventually going for). As part of this process, I wanted to be able to change the font of my plots to &lt;a href=&#34;https://fonts.google.com/specimen/Source+Sans+Pro&#34;&gt;Source Sans Pro&lt;/a&gt;, which is a Google font.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sysfonts-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;sysfonts&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;The first step here was to install and load the &lt;code&gt;sysfonts&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(sysfonts)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;xquartz&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;XQuartz&lt;/h3&gt;
&lt;p&gt;If you end up getting the following error when loading &lt;code&gt;sysfonts&lt;/code&gt;: &lt;code&gt;Reason: image not found&lt;/code&gt;, you might need to do some additional work. This happened to me initially, and after doing some Googling, I found &lt;a href=&#34;https://github.com/yixuan/showtext/issues/13&#34;&gt;this GitHub issue&lt;/a&gt;. Installing XQuartz was recommended as a fix, particularly for Macs, so I downloaded it from &lt;a href=&#34;https://www.xquartz.org/&#34;&gt;here&lt;/a&gt;. After downloading XQuartz, I uninstalled, reinstalled, and loaded &lt;code&gt;sysfonts&lt;/code&gt; and things went smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;downloading-font-to-your-computer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Downloading font to your computer&lt;/h2&gt;
&lt;p&gt;As I learned from this &lt;a href=&#34;https://github.com/kjhealy/sourcesans/blob/150207b18f4fbcc4c954715f269f8b20ce834a54/R/sourcesans.r&#34;&gt;super helpful GitHub repo&lt;/a&gt;, you need to install the font on your system as well as within R.&lt;/p&gt;
&lt;div id=&#34;mac&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Mac&lt;/h3&gt;
&lt;p&gt;I went through this process on a Mac, so this is what I ended up doing to install the font. I went to the &lt;a href=&#34;https://fonts.google.com/specimen/Source+Sans+Pro&#34;&gt;Google Fonts page for the font&lt;/a&gt; and clicked on “Select this font”. Then after clicking on “1 Family Selected” at the bottom, I downloaded the font by clicking on the download icon. This downloaded a zip drive into my Downloads folder. To install it as a font, I extracted the zip folder (by opening the zip drive). In a different Finder window, I opened my Applications folder and found Font Book. Then I dragged the zip folder over into Font Book.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pc&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;PC&lt;/h3&gt;
&lt;p&gt;I modified the above instructions from these instructions on &lt;a href=&#34;https://flourishonline.com.au/download-google-fonts-mac-pc/&#34;&gt;Flourish Online&lt;/a&gt;, which also has PC instructions. If anyone gives these a try and they don’t work, let me know and I’ll try to do some troubleshooting!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;font_add_google&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;font_add_google&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Next, I used the &lt;code&gt;font_add_google&lt;/code&gt; function from &lt;code&gt;sysfonts&lt;/code&gt; to download the Source Sans Pro fonts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;font_add_google(&amp;quot;Source Sans Pro&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to install a different Google Font, you can run &lt;code&gt;font_families_google()&lt;/code&gt; to see the list of family names of fonts currently available in Google Fonts:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(font_families_google())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;ABeeZee&amp;quot;       &amp;quot;Abel&amp;quot;          &amp;quot;Abhaya Libre&amp;quot;  &amp;quot;Abril Fatface&amp;quot;
## [5] &amp;quot;Aclonica&amp;quot;      &amp;quot;Acme&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;To continue with my Lego theme, I’ll demonstrate using this font on data from the &lt;code&gt;legocolors&lt;/code&gt; package. We can make the following graph of approximate lego brick availability based on the year a brick was released (colored by the brick color!):&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(legocolors)
library(ggplot2)

ggplot(legocolors, aes(x = year_released, y = bl_bp, colour = hex)) +
  geom_point() +
  scale_color_manual(values = legocolors$hex) +
  theme_minimal() +
  theme(legend.position = &amp;quot;none&amp;quot;, text = element_text(family = &amp;quot;Source Sans Pro&amp;quot;), plot.title = element_text(face = &amp;quot;bold&amp;quot;)) +
  labs(x = &amp;quot;Year released&amp;quot;, y = &amp;quot;Brick availability&amp;quot;, title = &amp;quot;Lego availability&amp;quot;, subtitle = &amp;quot;All of the text is now in Source Sans Pro!&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 3 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-11-google-fonts/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;troubleshooting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;This process is a little bit finicky, so there are certain errors that crop up frequently. For me, just restarting RStudio and/or my computer (or updating the computer, if necessary) has solved these. The most common errors are &lt;code&gt;No font could be found for family &#34;Source Sans Pro&#34;&lt;/code&gt; and &lt;code&gt;&#34;Error in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : polygon edge not found&#34;&lt;/code&gt;, both of which relate to R not being able to find the font. If the font is indeed installed on your computer (you can check this in Font Book, for a Mac), then restarting things should help R find the font.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Accessing Mode data in R</title>
      <link>/post/2019-09-26-mode-api-instructions/</link>
      <pubDate>Thu, 26 Sep 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-09-26-mode-api-instructions/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;In the past, I’ve been used to a pretty straightforward R workflow: download my data as a csv from somewhere, save it on my computer, and go to work. Now that I work in healthcare, downloading data and saving it on my computer is no longer such a good idea (since that would be illegal) so I’ve needed other ways to get the data I need into R. My company uses the data analysis platform &lt;a href=&#34;https://mode.com/&#34;&gt;Mode Analytics&lt;/a&gt; to pull data from our database using SQL. I wanted a way to get data directly from Mode into R without needing to download the results of a report as a CSV, move them onto Google Drive, and then access them in R.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;get-api-access-token&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Get API access token&lt;/h2&gt;
&lt;p&gt;The first step to accessing Mode via API is to &lt;a href=&#34;https://mode.com/help/articles/user-accounts/#api-tokens&#34;&gt;generate a token&lt;/a&gt;. First, log in to Mode, click on your name in the top left corner, and select “My Account”. Then click on “API Tokens” on the left side. You can generate a token by specifying a name for the token and clicking “Create token”. The resulting credentials consist of your token (a.k.a. username or access key) and your password (a.k.a. access secret). This token is associated with your Mode user account, not an organization, so you’ll be able to access reports from any organization you have access to.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;export-report-csv-to-dataframe&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Export report CSV to dataframe&lt;/h2&gt;
&lt;p&gt;The following instructions essentially follow the Python code instructions on the Mode website to &lt;a href=&#34;https://mode.com/developer/api-cookbook/distribution/export-csv/&#34;&gt;export a report to a csv&lt;/a&gt;. This code doesn’t actually download the csv file, however, just imports it into R as a dataframe (so no datafiles on your computer!).&lt;/p&gt;
&lt;p&gt;The following functions rely on the &lt;code&gt;httr&lt;/code&gt; and &lt;code&gt;jsonlite&lt;/code&gt; packages:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(httr)
library(jsonlite)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also need your username and password, preferably assigned to variables in R. For this example, my username is assigned to &lt;code&gt;username&lt;/code&gt; and my password is assigned to &lt;code&gt;password&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Replace with your username and password
username &amp;lt;- &amp;quot;YOUR_USERNAME&amp;quot;
password &amp;lt;- &amp;quot;YOUR_PASSWORD&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You also need to find the token of the report you’re interested in. When you go to your report in Mode, the token is everything after “reports/”. So, for example, if you’re interested in Legos (which you should be), you can get the most recent run of the &lt;a href=&#34;https://app.mode.com/modeanalytics/reports/eb4fdefe37d8&#34;&gt;Lego set summary&lt;/a&gt; report.
The URL is &lt;a href=&#34;https://app.mode.com/modeanalytics/reports/eb4fdefe37d8&#34; class=&#34;uri&#34;&gt;https://app.mode.com/modeanalytics/reports/eb4fdefe37d8&lt;/a&gt;, so the report token is “eb4fdefe37d8”.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Replace with the report token of interest
report_token &amp;lt;- &amp;quot;eb4fdefe37d8&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you need the name of your organization on Mode. For this example, we’ll be looking at a community available Mode report, so the organization is “modeanalytics”. You can get this from the URL as well, it will be the part directly before “/reports”:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Replace with the organization of interest
organization &amp;lt;- &amp;quot;modeanalytics&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;get-the-latest-run-token&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Get the latest run token&lt;/h3&gt;
&lt;p&gt;The first step is to find the run token of the most recent time the Mode report was run. The following function gets that token, or throws an error if the latest run of the report was not successful:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_report_latest_run &amp;lt;- function(report_token, organization, username, password){
  # Generate the URL for runs of the report you&amp;#39;re interested in
  url = paste0(&amp;quot;https://modeanalytics.com/api/&amp;quot;, organization, &amp;quot;/reports/&amp;quot;, report_token, &amp;quot;/runs&amp;quot;)
  r = GET(url, authenticate(username, password, type = &amp;quot;basic&amp;quot;))
  result = fromJSON(content(r, &amp;quot;text&amp;quot;))
  # Find the most recent run token
  most_recent_report_run_token &amp;lt;- result$`_embedded`$report_runs[1,]$token
  # Find the status of the most recent run
  status = result$`_embedded`$report_runs[1,]$state
  if(status == &amp;quot;succeeded&amp;quot;){ # if the most recent report ran,
    return(most_recent_report_run_token) # return that run token
  } else{
    stop(&amp;quot;Report latest run did not succeed.&amp;quot;) # if the most recent run failed, error
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, for our example report, the most recent run token was:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_report_latest_run(report_token, organization, username, password)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2c17666a589b&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;extract-the-data-from-the-most-recent-run&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Extract the data from the most recent run&lt;/h3&gt;
&lt;p&gt;Now, we can use a second function (which calls &lt;code&gt;get_report_latest_run&lt;/code&gt;) to get the data from the most recent run:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;export_report_to_csv &amp;lt;- function(report_token, organization, username, password) {
  # Get the latest run token
  latest_report_run_token &amp;lt;- get_report_latest_run(report_token, organization, username, password)
  # Generate the URL for the latest run of the report as a csv
  url &amp;lt;- paste0(&amp;quot;https://modeanalytics.com/api/&amp;quot;, organization, &amp;quot;/reports/&amp;quot;, report_token, &amp;quot;/runs/&amp;quot;, latest_report_run_token, &amp;quot;/results/content.csv&amp;quot;)
  r &amp;lt;- GET(url, authenticate(username, password, type = &amp;quot;basic&amp;quot;))
  # Read the data as a csv
  r_csv &amp;lt;- content(r, type = &amp;quot;text/csv&amp;quot;)
  return(r_csv)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;To get the data from the most recent run of the &lt;a href=&#34;https://app.mode.com/modeanalytics/reports/eb4fdefe37d8&#34;&gt;Lego set summary&lt;/a&gt; report, you want to save a script file containing the above two functions (I call this script &lt;code&gt;mode_api_script.R&lt;/code&gt;. Then, run the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(httr)
library(jsonlite)
source(&amp;quot;mode_api_script.R&amp;quot;)

# Set username, password, and report token
username &amp;lt;- &amp;quot;YOUR_USERNAME&amp;quot;
password &amp;lt;- &amp;quot;YOUR_PASSWORD&amp;quot;
report_token &amp;lt;- &amp;quot;eb4fdefe37d8&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lego_data &amp;lt;- export_report_to_csv(report_token, organization, username, password)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No encoding supplied: defaulting to UTF-8.
## No encoding supplied: defaulting to UTF-8.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Parsed with column specification:
## cols(
##   year = col_double(),
##   white = col_double(),
##   red = col_double(),
##   blue = col_double(),
##   black = col_double(),
##   light_gray = col_double(),
##   total = col_double(),
##   main = col_character()
## )&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::kable(head(lego_data))&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;year&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;white&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;red&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;blue&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;black&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;light_gray&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;total&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;main&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1950&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1953&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1954&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1955&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1957&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;White was the main color&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Git Workflow #1: Existing project, GitHub last</title>
      <link>/post/2019-09-26-git-workflow1/</link>
      <pubDate>Tue, 17 Sep 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-09-26-git-workflow1/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;Over the coming months, I plan on sharing a series of Git workflow tutorials. Getting a Git project set up can be a pretty simple process, but depending on the order in which you do things, set-up can get complicated. This first tutorial addresses one of those fairly complicated situations.&lt;/p&gt;
&lt;p&gt;The schema for these tutorials is loosely based on the incredible Git + R bible by Jenny Bryan, &lt;a href=&#34;https://happygitwithr.com/&#34;&gt;Happy Git and GitHub for the useR&lt;/a&gt;. The only difference is that I will be showing the workflow for setting up the project using the command line, rather than RStudio.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;existing-project-github-last&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Existing project, GitHub last&lt;/h2&gt;
&lt;p&gt;This first tutorial addresses the following situation: you have a folder for your project on your computer already. You would like this folder to be associated with a GitHub repository, but you haven’t created this repository yet, or you’ve created the GitHub repository and haven’t connected it with your local folder [^1].&lt;/p&gt;
&lt;p&gt;[^1] Throughout this tutorial, “local” refers to the copy of the repository on your computer. “Remote” refers to the copy on GitHub.&lt;/p&gt;
&lt;div id=&#34;make-a-git-repo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Make a Git repo&lt;/h3&gt;
&lt;p&gt;The first step in this process is to make your local project into a Git repository. Start by using the command-line to navigate to the folder for your project (using &lt;code&gt;cd&lt;/code&gt;). Once you are in the proper folder, run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command either creates a new Git repository, or, in our case, converts an existing project into a Git repository. If you want to read more about &lt;code&gt;git init&lt;/code&gt;, particularly the difference between &lt;code&gt;git init&lt;/code&gt; and &lt;code&gt;git clone&lt;/code&gt;, Atlassian has a useful &lt;a href=&#34;https://www.atlassian.com/git/tutorials/setting-up-a-repository/git-init&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, since you’ve made edits / added files into your project, you want to add and commit those changes using the following commands:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git add -A
git commit -m &amp;quot;test commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can make the commit message whatever you want. Note, &lt;code&gt;git add -A&lt;/code&gt; adds all files in your repository. If you only want to add certain files, you can add them by name. For example, if you only want to add the file &lt;code&gt;test.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git add test.txt
git commit -m &amp;quot;test commit&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-github-repo&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Make a GitHub repo&lt;/h3&gt;
&lt;p&gt;Next, we need to create a GitHub repository for our project. Depending on your workflow, you may have already created this repository. If not, log in to &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;. Click the green “New repository” button. Ideally, you want the name of your new repository to match the name of the folder on your computer (but if not, it’s not a big deal). You don’t really want to initialize the repository with a README, but if you do, you can work around this later.&lt;/p&gt;
&lt;p&gt;Once the repository has been set up, you can copy the HTTPS URL to your clipboard using the green “Clone or Download” button.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;connect-the-github-repo-to-your-project&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Connect the GitHub repo to your project&lt;/h3&gt;
&lt;p&gt;Now that you have a GitHub repository and you have a Git repository on your computer, you want to connect the two. To do this, run the following in the shell, using the URL that you just copied from GitHub:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git remote add origin &amp;lt;YOUR URL HERE&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, you don’t need the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; on either side of the URL, just paste the URL as is.&lt;/p&gt;
&lt;p&gt;You now need to tell your computer what the upstream branch should be, i.e. what branch on GitHub to pull updates from.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git branch --set-upstream-to=origin/master master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reconcile-the-remote-and-local-repositories&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reconcile the remote and local repositories&lt;/h3&gt;
&lt;p&gt;Now, assuming that you have edits both on your computer and on the GitHub repository, you need to be able to reconcile these changes so that the two are the same. This is assuming that you have files added in the folder on your computer and also something like a README or .gitignore on GitHub. To fix this problem, you first need to pull the changes from the GitHub repository onto your computer:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git pull --allow-unrelated-histories&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--allow-unrelated-histories&lt;/code&gt; portion of the command allows you to merge these two repositories (the local and the remote) even though they don’t have a common ancestor (you created them independently and made changes to both independently).&lt;/p&gt;
&lt;p&gt;Now, you can push the changes from your local repository up to GitHub:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Goldwater Highlight</title>
      <link>/post/goldwater-highlight/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/goldwater-highlight/</guid>
      <description>&lt;p&gt;This is just a quick post to provide a &lt;a href=&#34;https://twitter.com/GoldwaterSC/status/1163980565978259456&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt; to the Goldwater Scholar Social Media Highlight that Nina Singh wrote about me. You can find the pdf to the article &lt;a href=&#34;/goldwater_highlight.pdf&#34;&gt;here&lt;/a&gt;. Huge thanks to the Goldwater social media team for including me in this!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk: Delineating parapatric ranges using species distribution models and support vector machines: An example with three-toed sloths (Bradypus)</title>
      <link>/talk/ibs_2019/</link>
      <pubDate>Fri, 09 Aug 2019 00:00:00 -0400</pubDate>
      <guid>/talk/ibs_2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Poster: Improving species range estimates for an arboreal species group with a parapatric distribution</title>
      <link>/talk/mammalogy_2019/</link>
      <pubDate>Sat, 29 Jun 2019 00:00:00 -0400</pubDate>
      <guid>/talk/mammalogy_2019/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Talk: Using SVMs to delineate parapatric ranges: An example with three-toed sloths (Bradypus)</title>
      <link>/talk/helenfellow_june2019/</link>
      <pubDate>Thu, 13 Jun 2019 11:30:00 -0400</pubDate>
      <guid>/talk/helenfellow_june2019/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vT29X9rGoq1GeCwrXMPJEhmwy7I_nf8fFzpIMdWyLQfROI-zVqicELakhgOgRWvDgicV3s_c6ii4njc/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Copying R libraries to a USB</title>
      <link>/post/2019-06-07-usb/</link>
      <pubDate>Fri, 07 Jun 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-06-07-usb/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;A few people in my lab are headed to a workshop in Colombia next week, and due to the possibility of intermittent wi-fi, they need to load all of the workshop materials onto USB drives. They need R with certain packages on the USBs in versions compatible with both Macs and PCs, so I offered to help out by loading my Mac version of R and my packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-r-onto-a-usb&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading R onto a USB&lt;/h2&gt;
&lt;p&gt;The first step was to copy my installation of R onto the USB. To do this, I just copied R from my Applications folder onto the folder. We are not entirely sure if this will work yet to transfer R to someone else’s computer (if someone knows the answer, let me know!), but we are going to test it out shortly.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;loading-r-packages-onto-a-usb&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading R packages onto a USB&lt;/h2&gt;
&lt;p&gt;The next step was to transfer all of my R packages onto the USB. To do this, I first needed to figure out where the packages were saved on my computer. You can run the following in R to find where your packages are saved:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;.libPaths()
## [1] &amp;quot;/Library/Frameworks/R.framework/Versions/3.6/Resources/library&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, I needed to figure out how to navigate to the USB in Terminal. According to this &lt;a href=&#34;https://apple.stackexchange.com/questions/60231/using-terminal-how-can-i-find-which-directory-is-my-usb-drive-mounted-in&#34;&gt;StackOverflow answer&lt;/a&gt;, all drives are mounted in &lt;code&gt;/Volumes&lt;/code&gt;, so I ran the following in Terminal:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;cd /Volumes
ls&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, I was able to see &lt;code&gt;USB DISK&lt;/code&gt; as one of the folders in &lt;code&gt;/Volumes&lt;/code&gt;. In order to copy all of the packages from my computer onto the USB, I used &lt;code&gt;cp&lt;/code&gt; to move everything from the folder found in &lt;code&gt;.libPaths()&lt;/code&gt; onto the USB:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# replace the first file path with what you get from .libPaths()
cp -R /Library/Frameworks/R.framework/Versions/3.5/Resources/library/ /Volumes/USB\ DISK/R_packages/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Setting resolution and aspect ratios in R</title>
      <link>/post/2019-05-23-highres-figures/</link>
      <pubDate>Thu, 23 May 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-05-23-highres-figures/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;I recently needed to make some figures to present and noticed that the ones I was importing from saved R plots were showing up fuzzy on the presentation. Shortly afterwards, I had interns trying to generate figures with the same aspect ratio from different computers. I did a little digging and found this method for saving figures with specified resolutions and aspect ratios.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solution&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;In order to save your figure with a certain size and resolution, you just need to include your code for plotting between the two lines below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# To save a .png file:
png(&amp;quot;your_image.png&amp;quot;, units = &amp;quot;in&amp;quot;, width = 5, height = 4, res = 300)
# your plotting code here
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also save .bmp, .jpeg, and .tiff files in the same way with the &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;jpeg&lt;/code&gt; and &lt;code&gt;tiff&lt;/code&gt; functions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;To see this in practice, we can plot some data from the iris dataset the “regular” way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pairs(iris[,1:4], col = iris$Species)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-05-23-highres-figures/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Things look pretty nice in the plotting window, but when you save that figure from RStudio, this is the result:&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:80%&#34; src=&#34;/img/lowres.png&#34; /&gt;
&lt;/figure&gt;
&lt;p&gt;To get rid of that graininess, we can instead save the figure in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;png(&amp;quot;highres.png&amp;quot;, units = &amp;quot;in&amp;quot;, width = 5, height = 4, res = 300)
pairs(iris[,1:4], col = iris$Species)
dev.off()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The resulting figure is much clearer and ready to be inserted in presentations or publications!&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:80%&#34; src=&#34;/img/highres.png&#34; /&gt;
&lt;/figure&gt;
&lt;p&gt;You can also change the aspect ratio by modifying the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; arguments. You can leave the units in inches or set it to pixels (&lt;code&gt;&#34;px&#34;&lt;/code&gt;), centimeters (&lt;code&gt;&#34;cm&#34;&lt;/code&gt;), or millimeters (&lt;code&gt;&#34;mm&#34;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Thresholding species distribution models</title>
      <link>/post/2019-04-12-sdm-threshold/</link>
      <pubDate>Fri, 12 Apr 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-04-12-sdm-threshold/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;Conservation is often the main motivation behind studying where a species lives – having a model of a species’ range can help scientists assess whether it is at risk of extinction, designate protected regions to preserve its habitat, and study potential impacts of human activity. When we create species distribution models using common methods like Maxent, the result is a map of predicted habitat suitability or probability of species presence, such as the one below. In conservation management, however, it is often more useful to present range models in the form of species presence/absence. We can convert continuous predictions of habitat suitability into binary predictions of whether a species lives in a certain region or not using thresholds: i.e. designating all regions above a certain suitability level as within the species range and all areas below that suitability level as outside of it.&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:60%&#34; src=&#34;/img/threshold_ex.png&#34; /&gt;
&lt;figcaption&gt;
Left: species distribution model with continuous habitat suitability values. Right: binary presence/absence model used by applying a threshold. (Figure from &lt;a href=&#34;https://rspatial.org/sdm/6_sdm_methods.html#mahalanobis-distance&#34;&gt;Spatial Data Science with R&lt;/a&gt;)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I recently needed to threshold some species distribution models to convert them into these binary maps and had difficulty finding a built-in way to do this in R. The &lt;code&gt;dismo&lt;/code&gt; package for species distribution modeling has a function &lt;code&gt;threshold&lt;/code&gt; to find what value to use as the “cut-off”, but I needed a function to apply a given cut-off value to model and output a raster with binary values for presence and absence.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;thresholding-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Thresholding function&lt;/h2&gt;
&lt;p&gt;I wrote an R function to take a species distribution model and threshold it by a given threshold - either minimum training presence (MTP) or 10th percentile training present (P10).&lt;/p&gt;
&lt;div id=&#34;minimum-training-presence&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Minimum training presence&lt;/h3&gt;
&lt;p&gt;This threshold finds the lowest predicted suitability value for an occurrence point. Essentially, it assumes that the least suitable habitat at which the species is known to occur is the minimum suitability value for the species. The MTP threshold ensures that all occurrence points fall within the area of the binary model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;th-percentile-training-presence&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;10th percentile training presence&lt;/h3&gt;
&lt;p&gt;The P10, on the other hand, is a threshold which omits all regions with habitat suitability lower than the suitability values for the lowest 10% of occurrence records. It assumes that the 10% of occurrence records in the least suitable habitat aren’t occurring in regions that are representative of the species overall habitat, and thus should be omitted. This threshold omits a greater region than the MTP.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-function&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The function&lt;/h3&gt;
&lt;p&gt;The following is the function I wrote to apply these two thresholds to an SDM. The function’s arguments are the SDM, the occurrence points of the species in the form of longitude - latitude pairs, the threshold type, and whether the user would like the output to be a binary prediction (0s for predicted absence and 1s for predicted presence), or a thresholded continuous SDM (regions with suitability below the threshold set to 0).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(raster)
## Loading required package: sp

sdm_threshold &amp;lt;- function(sdm, occs, type = &amp;quot;mtp&amp;quot;, binary = FALSE){
  occPredVals &amp;lt;- raster::extract(sdm, occs)
  if(type == &amp;quot;mtp&amp;quot;){
    thresh &amp;lt;- min(na.omit(occPredVals))
  } else if(type == &amp;quot;p10&amp;quot;){
    if(length(occPredVals) &amp;lt; 10){
      p10 &amp;lt;- floor(length(occPredVals) * 0.9)
    } else {
      p10 &amp;lt;- ceiling(length(occPredVals) * 0.9)
    }
    thresh &amp;lt;- rev(sort(occPredVals))[p10]
  }
  sdm_thresh &amp;lt;- sdm
  sdm_thresh[sdm_thresh &amp;lt; thresh] &amp;lt;- NA
  if(binary){
    sdm_thresh[sdm_thresh &amp;gt;= thresh] &amp;lt;- 1
  }
  return(sdm_thresh)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first step of the function is to extract the SDM predictions at all occurrence points.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;occPredVals &amp;lt;- raster::extract(sdm, occs)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, the function calculates a threshold value &lt;code&gt;thresh&lt;/code&gt; for either the MTP or P10 threshold. Finally, it sets all cells in the SDM raster with values lower than the threshold equal to 0. If the user wants a binary map, the function sets all cells above the threshold equal to 1:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sdm_thresh &amp;lt;- sdm
sdm_thresh[sdm_thresh &amp;lt; thresh] &amp;lt;- NA
if(binary){
  sdm_thresh[sdm_thresh &amp;gt;= thresh] &amp;lt;- 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Now we can apply the function to an actual SDM I generated for a species of three-toed sloth (&lt;em&gt;Bradypus variegatus&lt;/em&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load in the SDM and occurrence points
sloth_sdm &amp;lt;- raster(&amp;quot;../../../static/SDMs/variegatus_sdm.tif&amp;quot;)
sloth_occs &amp;lt;- read.csv(&amp;quot;../../../static/SDMs/variegatus_occ.csv&amp;quot;)

plot(sloth_sdm)
points(sloth_occs[,2:3], pch = 19, cex = 0.5)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can apply both MTP and P10 thresholds to the SDM based on the location of the occurrence points:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sloth_mtp &amp;lt;- sdm_threshold(sloth_sdm, sloth_occs[,2:3], &amp;quot;mtp&amp;quot;)
plot(sloth_mtp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
sloth_p10 &amp;lt;- sdm_threshold(sloth_sdm, sloth_occs[,2:3], &amp;quot;p10&amp;quot;)
plot(sloth_p10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We could also make either of these thresholded SDMs into a binary prediction in the following way:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sloth_mtp_bin &amp;lt;- sdm_threshold(sloth_sdm, sloth_occs[,2:3], &amp;quot;mtp&amp;quot;, binary = TRUE)
plot(sloth_mtp_bin)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;generalization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Generalization&lt;/h2&gt;
&lt;p&gt;My primary motivation to write this function was to use it on SDMs, but the function could easily be generalized to threshold any raster by a given value:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;raster_threshold &amp;lt;- function(input_raster, points = NULL, type = NULL, threshold = NULL, binary = FALSE) {
  if (!is.null(points)) {
    pointVals &amp;lt;- raster::extract(input_raster, points)
    if (type == &amp;quot;mtp&amp;quot;) {
      threshold &amp;lt;- min(na.omit(pointVals))
    } else if (type == &amp;quot;p10&amp;quot;) {
      if (length(pointVals) &amp;lt; 10) {
        p10 &amp;lt;- floor(length(pointVals) * 0.9)
      } else {
        p10 &amp;lt;- ceiling(length(pointVals) * 0.9)
      }
      threshold &amp;lt;- rev(sort(pointVals))[p10]
    }
  }
  raster_thresh &amp;lt;- input_raster
  raster_thresh[raster_thresh &amp;lt; threshold] &amp;lt;- NA
  if (binary) {
    raster_thresh[raster_thresh &amp;gt;= threshold] &amp;lt;- 1
  }
  return(raster_thresh)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I expanded the function to allow the user to input points within the raster to calculate MTP and P10 thresholds if desired, but also to enable a user-specified threshold.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create arbitrary raster
raster1 &amp;lt;- raster(nrow=10, ncol=10)
raster1[1:25]&amp;lt;- 1:25
raster1[26:50] &amp;lt;- rev(1:25)
raster1[51:75] &amp;lt;- 1:25
raster1[76:100] &amp;lt;- rev(1:25)

# create a set of 20 arbitrary points within the raster
xy &amp;lt;- data.frame(x = runif(20, min = -150, max = 150), y = runif(20, min = -70, max = 70))

plot(raster1)
points(xy)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we can apply the function to see the MTP and P10 thresholded rasters:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mtp_raster &amp;lt;- raster_threshold(input_raster = raster1, points = xy, type = &amp;quot;mtp&amp;quot;, binary = TRUE)
plot(mtp_raster)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
p10_raster &amp;lt;- raster_threshold(input_raster = raster1, points = xy, type = &amp;quot;p10&amp;quot;, binary = TRUE)
plot(p10_raster)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-9-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also use a user-inputted threshold to remove all parts of the raster with values lower than 20:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;user_raster &amp;lt;- raster_threshold(input_raster = raster1, threshold = 20)
plot(user_raster)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-04-12-sdm-threshold/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Big vs. Small: Using ratios to compare life history strategies</title>
      <link>/talk/brownscholars_ratiotalk_2019/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 -0400</pubDate>
      <guid>/talk/brownscholars_ratiotalk_2019/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vQ1T_FLUSVOYZ3YCehaGJM7gFCFMOCQMllQ9A4itkVMk5IyUJugfnE8Qt95WqqFMsV5dNintG0qQjU0/embed?&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting alpha hulls to spatial objects</title>
      <link>/post/2019-03-18-alpha-hull/</link>
      <pubDate>Mon, 18 Mar 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-03-18-alpha-hull/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;In species distribution modeling, one of the key steps requires the researcher to select a “background region” for the species, i.e. a region over which a machine learning model will compare the environment of the “background points” with the environment at points where the species is known to occur. The key to selecting this region is to pick an area where the species could occur but hasn’t necessarily been observed – for example, you don’t want to include an area separated from the rest of the range by a big mountain range that you don’t believe the organism could cross, but you do want to include a range of potential environments. There are many methods to delineate this region, from drawing a box around the occurrence points of the species to creating a buffered region around each occurrence point (think a collection of lots of circles around each point). One of my research mentors suggested that I try a new method using a shape known as an α-hull.&lt;/p&gt;
&lt;p&gt;I’ll describe α-hulls in more detail below, but you can get the gist from the map above, where I show occurrence points for two species of sloths surrounded by an α-hull for each species. When I tried to create this region in R, however, I ran into a roadblock: the α-hull objects were a specific kind of R object that didn’t play nicely with spatial data in R, particularly objects from the &lt;code&gt;sp&lt;/code&gt; package. In particular, I needed a way to convert α objects into SpatialPolygons. This post describes a series of functions I wrote to carry out this process.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-alphahull-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The &lt;code&gt;alphahull&lt;/code&gt; package&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;alphahull&lt;/code&gt; R package (Pateiro-Lopez et al. 2016) draws shapes (like the ones above) around sets of points based on a given parameter, α. The package creates two kinds of shapes I was interested in: α-shapes and α-convex hulls. The functions in this post convert these shapes into objects compatible with the &lt;code&gt;sp&lt;/code&gt; package, which can then be used for spatial analyses, including creating background regions for species distribution modeling.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load packages
library(alphahull)
## Registered S3 method overwritten by &amp;#39;R.oo&amp;#39;:
##   method        from       
##   throw.default R.methodsS3
library(sp)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;alpha-shapes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Alpha shapes&lt;/h3&gt;
&lt;p&gt;Alpha shapes consist of a collection of lines drawn around a group of points. Probably the most familiar example of an α-shape is a convex hull, the smallest convex shape that can be drawn around a group of objects. For example, the following code draws a convex hull around some data from the iris dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(iris)
iris_sepals &amp;lt;- iris[,1:2]
# remove duplicate datapoints
iris_sepals &amp;lt;- iris_sepals[!duplicated(paste(iris_sepals$Sepal.Length, iris_sepals$Sepal.Width)), ]

# find points that lie on the convex hull
convexhull &amp;lt;- chull(iris_sepals)
# plot the data points
plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
hull_pts &amp;lt;- c(convexhull, convexhull[1])
# plot the convex hull
lines(iris_sepals[hull_pts, ], col = &amp;quot;magenta&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This convex hull (drawn in magenta) is an example of an α-shape: all convex hulls are α-shapes, but not all α-shapes are convex hulls. An α-shape doesn’t have to be convex – the lines making up the border of the shape can create concave edges relative to the points in the dataset. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create a three-paneled figure
par(mfrow = c(1,3))

# create three different alpha shapes
alphashape_0.5 &amp;lt;- ashape(iris_sepals, alpha = 0.5)
alphashape_1 &amp;lt;- ashape(iris_sepals, alpha = 1)
alphashape_2 &amp;lt;- ashape(iris_sepals, alpha = 2)

# plot alpha = 0.5
plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
plot(alphashape_0.5, col = &amp;quot;magenta&amp;quot;, add = TRUE)
# plot alpha = 1
plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
plot(alphashape_1, col = &amp;quot;magenta&amp;quot;, add = TRUE)
# plot alpha = 2
plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
plot(alphashape_2, col = &amp;quot;magenta&amp;quot;, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# reset plotting parameters
par(mfrow = c(1,1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alpha shapes are created using the &lt;code&gt;ashape&lt;/code&gt; function from the &lt;code&gt;alphahull&lt;/code&gt; package. As you can see, increasing the α value makes the shape closer and closer to the convex hull, while low values of α make the shape more concave.&lt;/p&gt;
&lt;div id=&#34;alpha-shapes-to-polygons&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Alpha shapes to polygons&lt;/h4&gt;
&lt;p&gt;In order to use α-shapes with spatial data in R, I wanted to convert these shapes to polygons. To accomplish this, I modified some of the code from an &lt;a href=&#34;https://rpubs.com/geospacedman/alphasimple&#34;&gt;RPubs by Barry Rowlingson&lt;/a&gt; to create the following function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(igraph)
## 
## Attaching package: &amp;#39;igraph&amp;#39;
## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     decompose, spectrum
## The following object is masked from &amp;#39;package:base&amp;#39;:
## 
##     union

ashape2poly &amp;lt;- function(ashape){
  # Convert node numbers into characters
  ashape$edges[,1] &amp;lt;- as.character(ashape$edges[,1])
  ashape_graph &amp;lt;- graph_from_edgelist(ashape$edges[,1:2], directed = FALSE)
  if (!is.connected(ashape_graph)) {
    stop(&amp;quot;Graph not connected&amp;quot;)
  }
  if (any(degree(ashape_graph) != 2)) {
    stop(&amp;quot;Graph not circular&amp;quot;)
  }
  if (clusters(ashape_graph)$no &amp;gt; 1) {
    stop(&amp;quot;Graph composed of more than one circle&amp;quot;)
  }
  # Delete one edge to create a chain
  cut_graph &amp;lt;- ashape_graph - E(ashape_graph)[1]
  # Find chain end points
  ends = names(which(degree(cut_graph) == 1))
  path = get.shortest.paths(cut_graph, ends[1], ends[2])$vpath[[1]]
  # this is an index into the points
  pathX = as.numeric(V(ashape_graph)[path]$name)
  # join the ends
  pathX = c(pathX, pathX[1])
  return(pathX)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the reasoning behind the function, check out the RPubs I referred to for guidance. For a sanity check, we can compare the resulting shape to the original α-shape we were trying to replicate:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;alphapoly_1 &amp;lt;- ashape2poly(alphashape_1)
plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
# show the original alpha shape
plot(alphashape_1, lwd = 5, col = &amp;quot;gray&amp;quot;, add = TRUE)
# plot the new polygon
lines(iris_sepals[alphapoly_1, ], col = &amp;quot;magenta&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;alpha-hulls&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Alpha hulls&lt;/h3&gt;
&lt;p&gt;Alpha hulls add another layer of complexity to this process because they can include curved lines (arcs) as edges of a shape. For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;alphahull_1 &amp;lt;- ahull(iris_sepals, alpha = 1)

plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
plot(alphahull_1, col = &amp;quot;magenta&amp;quot;, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;arcs-to-lines&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Arcs to lines&lt;/h4&gt;
&lt;p&gt;To deal with this curvature, I wrote the following function to convert the arcs between points in the hull to a series of very short line segments in order to approximate the curve.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function to convert an arc into line segments
# given the center of the arc, the radius, the vector, and the angle (radians)
arc2line &amp;lt;- function(center, r, vector, theta, npoints = 100) {
  # Get the angles at the extremes of the arcs
  angles &amp;lt;- anglesArc(vector, theta)
  # Generate sequence of angles along the arc to determine the points
  seqang &amp;lt;- seq(angles[1], angles[2], length = npoints)
  # Generate x coordinates for points along the arc
  x &amp;lt;- center[1] + r * cos(seqang)
  # Generate y coordinates for points along the arc
  y &amp;lt;- center[2] + r * sin(seqang)
  coords.xy &amp;lt;- cbind(x,y)
  line &amp;lt;- Line(coords = coords.xy)
  return(line)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;hulls-to-lines&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Hulls to lines&lt;/h4&gt;
&lt;p&gt;Using the previous function, I wrote another function to take an α-hull and convert it into a set of SpatialLines objects. The function uses the &lt;code&gt;arc2line&lt;/code&gt; function from above to convert each arc in the α-hull into a series of lines, before adding each of these sets of lines together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ahull2lines &amp;lt;- function(hull){
  arclist &amp;lt;- hull$arcs
  lines &amp;lt;- list()
  for (i in 1:nrow(arclist)) {
    # Extract the attributes of arc i
    center_i &amp;lt;- arclist[i, 1:2]
    radius_i &amp;lt;- arclist[i, 3]
    vector_i &amp;lt;- arclist[i, 4:5]
    theta_i &amp;lt;- arclist[i, 6]
    # Convert arc i into a Line object
    line_i &amp;lt;- arc2line(center = center_i, r = radius_i, vector = vector_i, theta = theta_i)
    list_length &amp;lt;- length(lines)
    if(list_length &amp;gt; 0){
      # If a line has already been added to the list of lines
      # Define last_line_coords as the coordinates of the last line added to the list before the ith line
      last_line_coords &amp;lt;- lines[[list_length]]@coords
    }
    if(i == 1){
      # Add the first line to the list of lines
      lines[[i]] &amp;lt;- line_i
    } else if(all.equal(line_i@coords[1,], last_line_coords[nrow(last_line_coords),])){
      # If the first coordinate in the ith line is equal to the last coordinate in the previous line
      # then those lines should be connected
      # Row bind the coordinates for the ith line to the coordinates of the previous line in the list
      lines[[list_length]]@coords &amp;lt;- rbind(last_line_coords, line_i@coords[2:nrow(line_i@coords),])
    } else {
      # If the first coordinate in the ith line does not match the last coordinate in the previous line
      # then the ith line represents a new line
      # Add the ith line to the list as a new element
      lines[[length(lines) + 1]] &amp;lt;- line_i
    }
  }
  # Convert the list of lines to a Line object
  lines &amp;lt;- Lines(lines, ID = &amp;#39;l&amp;#39;)
  # Convert the Line object to a SpatialLines object
  sp_lines &amp;lt;- SpatialLines(list(lines))
  return(sp_lines)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results look like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lines_1 &amp;lt;- ahull2lines(alphahull_1)
# the result is a SpatialLines object
class(lines_1)
## [1] &amp;quot;SpatialLines&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;

plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
# show the original alpha shape
plot(alphahull_1, lwd = 5, col = &amp;quot;gray&amp;quot;, add = TRUE)
# plot the new polygon
plot(lines_1, col = &amp;quot;magenta&amp;quot;, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The resulting SpatialLines object is an almost spot-on approximation of the original α-hull (shown in gray).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;spatiallines-to-spatialpolygon&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;SpatialLines to SpatialPolygon&lt;/h4&gt;
&lt;p&gt;Now, I needed a way to convert the SpatialLines object into a SpatialPolygon that would cover the same shape as the original α-hull. To accomplish this, I wrote a function that takes a SpatialLines object, checks which lines are part of polygons (i.e. form closed shapes), and converts those polygons to a SpatialPolygon.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spLines2poly &amp;lt;- function(sp_lines){
  # Extract the lines slot
  lines_slot &amp;lt;- sp_lines@lines[[1]]
  # Create a list of booleans indicating whether a given Line represents a polygon
  poly_bool &amp;lt;- sapply(lines_slot@Lines, function(x){
    coords &amp;lt;- lines_slot@Lines[[1]]@coords
    # Check if the first coordinate in the line is the same as the last
    all.equal(coords[1,], coords[nrow(coords),])
  })
  # Pull out the lines that form polygons
  poly_lines &amp;lt;- sp_lines[poly_bool]
  poly_lines_slot &amp;lt;- poly_lines@lines
  # Create SpatialPolygons
  sp_polys &amp;lt;- SpatialPolygons(list(Polygons(lapply(poly_lines_slot, function(x) {
    Polygon(slot(slot(x, &amp;quot;Lines&amp;quot;)[[1]], &amp;quot;coords&amp;quot;))
  }), ID = &amp;quot;1&amp;quot;)))
  return(sp_polys)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can apply this function to the &lt;code&gt;lines_1&lt;/code&gt; object we made from the original &lt;code&gt;alphahull_1&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SpPoly_1 &amp;lt;- spLines2poly(lines_1)
class(SpPoly_1)
## [1] &amp;quot;SpatialPolygons&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;

plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
# show the original alpha shape
plot(alphahull_1, lwd = 5, col = &amp;quot;gray&amp;quot;, add = TRUE)
# plot the new polygon
plot(SpPoly_1, border = &amp;quot;magenta&amp;quot;, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;alpha-hulls-to-spatialpolygons&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Alpha hulls to SpatialPolygons&lt;/h4&gt;
&lt;p&gt;Finally, we can string all of those functions together to create a single function that will convert an α-hull directly into a SpatialPolygon:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ahull2poly &amp;lt;- function(hull){
  # Convert the alpha hull to SpatialLines
  hull2SpatialLines &amp;lt;- ahull2lines(hull)
  # Convert SpatialLines to SpatialPolygon
  SpatialLines2SpatialPolygon &amp;lt;- spLines2poly(hull2SpatialLines)
  return(SpatialLines2SpatialPolygon)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a final sanity check, we can see that the resulting shape is the same as the original shape produced by the &lt;code&gt;alphahull&lt;/code&gt; package:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hullpoly_1 &amp;lt;- ahull2poly(alphahull_1)
class(hullpoly_1)
## [1] &amp;quot;SpatialPolygons&amp;quot;
## attr(,&amp;quot;package&amp;quot;)
## [1] &amp;quot;sp&amp;quot;

plot(iris_sepals, pch = 19, col = &amp;quot;darkseagreen&amp;quot;)
# show the original alpha shape
plot(alphahull_1, lwd = 5, col = &amp;quot;gray&amp;quot;, add = TRUE)
# plot the new polygon
plot(hullpoly_1, border = &amp;quot;magenta&amp;quot;, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-03-18-alpha-hull/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GitHub&lt;/h2&gt;
&lt;p&gt;The code for these functions is on my GitHub at &lt;a href=&#34;https://github.com/babichmorrowc/hull2spatial&#34; class=&#34;uri&#34;&gt;https://github.com/babichmorrowc/hull2spatial&lt;/a&gt;. If you have any thoughts or suggestions, please comment on this post or submit a pull request on GitHub. I hope to be formulating these functions into a package in the near future, so stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;citations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Citations&lt;/h2&gt;
&lt;p&gt;Beatriz Pateiro-Lopez and Alberto Rodriguez-Casal. (2016). alphahull:
Generalization of the Convex Hull of a Sample of Points in the Plane. R
package version 2.1. &lt;a href=&#34;https://CRAN.R-project.org/package=alphahull&#34; class=&#34;uri&#34;&gt;https://CRAN.R-project.org/package=alphahull&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Talk: Using SVMs to model ranges of congeneric sloth species</title>
      <link>/talk/nysdm_march2019/</link>
      <pubDate>Fri, 15 Mar 2019 14:30:00 -0400</pubDate>
      <guid>/talk/nysdm_march2019/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vS_w666eIt4-3dUI-z6iVlD08EphadvhGys2IarVUPk7QIdG3dn7opO1LLLeuM7vcb6j8k7_5nVOAef/embed?start=false&amp;loop=false&amp;delayms=5000&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk: STEM careers in museums</title>
      <link>/talk/la_lgbt_careertalk_2019/</link>
      <pubDate>Fri, 22 Feb 2019 17:00:00 -0500</pubDate>
      <guid>/talk/la_lgbt_careertalk_2019/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vT-sB5lS2bKsitOCUenYo1xA3pMzCxfo37TAnB408noR6SJPJpePBfei6p6FMylQFdmJ-FI4z-himQc/embed?start=false&amp;loop=false&amp;delayms=5000&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hacking Meteorites Part 1: Calculating percent weights</title>
      <link>/post/2019-02-20-meteoritecluster1/</link>
      <pubDate>Wed, 20 Feb 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-02-20-meteoritecluster1/</guid>
      <description>


&lt;p&gt;Earlier this month I participated in the American Museum of Natural History’s annual hackathon (see my last &lt;a href=&#34;https://babichmorrowc.github.io/post/2019-02-14-hackathon/&#34;&gt;post&lt;/a&gt; for details about the event overall). During the hackathon, I worked with Katy Abbott, another Helen Fellow at the museum with me, to use a machine learning algorithm called DBSCAN to tackle our challenge. This post explains the process we used to complete the first step of the challenge: estimating the percent weights of elements in a meteorite.&lt;/p&gt;
&lt;div id=&#34;challenge-accepted&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Challenge accepted&lt;/h2&gt;
&lt;p&gt;Our team, consisting of Peter Kang, Jackson Lee, Jeremy Neiman, John Underwood, Katy Abbott, Meret Götschel, and myself, chose to work on the &lt;a href=&#34;https://github.com/amnh/HackTheSolarSystem/wiki/Meteorite-Mineral-Mapping&#34;&gt;Meteorite Mineral Mapping challenge&lt;/a&gt;. For this challenge, our museum stakeholders, Marina Gemma and Sam Alpert, wanted a way to identify the mineral composition of meteorites.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;pixels-to-percents&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pixels to percents&lt;/h2&gt;
&lt;p&gt;The scientists scan meteorites with an electron microprobe, a device that provides the intensity of x-rays emitted from certain elements. The electron microprobe results in images with grayscale intensities corresponding to these x-ray intensities on a pixel-by-pixel basis.&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;../../../static/img/meteorite_pixel_intensity.png&#34; /&gt;
&lt;figcaption&gt;
Images of a meteorite produced by the electron microprobe showing pixel intensities for each of 10 elements - brighter grayscale values indicate greater amounts of that element in a pixel.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our first step was to convert these pixel intensities to the percent weight of each element in the mineral at that pixel. To do that, we referred to a set of standard images taken of minerals with a known proportion of each element. For example, the image below shows the pixel intensities of iron in 8 minerals: you can see that the pixels are brightest in Fe, or pure iron, and lower in iron oxide (&lt;span class=&#34;math inline&#34;&gt;\(\text{Fe}_3\text{O}_4\)&lt;/span&gt;) and troilite, or iron sulfide (FeS).&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;../../../static/img/iron_standard.png&#34; /&gt;
&lt;figcaption&gt;
Standard scan of the intensity of iron in each of 8 known minerals.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can relate the intensity of the iron pixels in the Fe mineral, for example, to the percent weight in that mineral (100%, since iron is the only element in Fe).&lt;/p&gt;
&lt;div id=&#34;import-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Import data&lt;/h3&gt;
&lt;p&gt;We started by creating a .csv file with the percent weight of each element in the minderals from the standards:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# import libraries
from sklearn.cluster import DBSCAN as dbscan
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
from sklearn import metrics
import matplotlib.pyplot as plt
import matplotlib.colors
from sklearn.decomposition import PCA
from pathlib import Path
from skimage.io import imread, imshow
import numpy.ma as ma
from collections import Counter

# read in percent weights by element of the minerals in the standard
weights = pd.read_csv(&amp;quot;../../../static/mineralmapping/weights_to_minerals.csv&amp;quot;)
print(weights.head())
##        mineral  Mg     Ni  Al        Fe      Ca  Cr   P        S      Ti  Si
## 0  CaTiO3std15 NaN    NaN NaN       NaN  29.481 NaN NaN      NaN  35.211 NaN
## 1  Fe-num2std9 NaN    NaN NaN  100.0000     NaN NaN NaN      NaN     NaN NaN
## 2      FeSstd2 NaN    NaN NaN   63.5252     NaN NaN NaN  36.4748     NaN NaN
## 3   Fe3O4std15 NaN    NaN NaN   72.3591     NaN NaN NaN      NaN     NaN NaN
## 4       Nistd9 NaN  100.0 NaN       NaN     NaN NaN NaN      NaN     NaN NaN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Note: I was able to add the above Python chunk in R by following &lt;a href=&#34;https://babichmorrowc.github.io/post/2019-02-20-pythonrmd/&#34;&gt;these instructions&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There is a linear relationship between pixel intensity and percent weight, so we used linear regression to find the slope of this relationship. We read in the .csv of pixel intensities for each element in the standards:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# read in the pixel intensities by element in the standard
mineral_standards = pd.read_csv(&amp;#39;../../../static/mineralmapping/mineral_standards.csv&amp;#39;)
print(mineral_standards.head())
##    Mg  Ni  Al  Fe   Ca  Cr  P  S   Ti  Si      mineral
## 0   0   0   0   0  171   0  4  0  459   0  CaTiO3std15
## 1   0   0   0   0  148   3  2  0  462   1  CaTiO3std15
## 2   0   2   0   0  141   6  3  0  455   2  CaTiO3std15
## 3   1   2   2   0  122   6  3  0  502   0  CaTiO3std15
## 4   0   0   0   0  138   5  5  0  457   1  CaTiO3std15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We modified the chemical formulas of each mineral using a dictionary by separating each element in the mineral with an &#34;_&#34; to make looping easier.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# create dictionary to standardize file names to chemical formulas
# needed to separate each element in the formula with an _ to make looping easier
mineral_dict = dict(zip(np.unique(mineral_standards[&amp;#39;mineral&amp;#39;]),
    [&amp;quot;Ca_Ti_O_3&amp;quot;, &amp;quot;Fe_&amp;quot;, &amp;quot;Fe_3O_4&amp;quot;, &amp;quot;Fe_S_&amp;quot;, &amp;quot;Ni_S_&amp;quot;, &amp;quot;Ni_&amp;quot;, &amp;quot;Ca_Fe_Mg_Mn_Ni_Si_&amp;quot;, &amp;quot;Ti_O_2&amp;quot;]))
# use dictionary to change mineral columns to underscore format
weights[&amp;#39;mineral&amp;#39;] = weights[&amp;#39;mineral&amp;#39;].map(mineral_dict)
mineral_standards[&amp;#39;mineral&amp;#39;] = mineral_standards[&amp;#39;mineral&amp;#39;].map(mineral_dict)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we created a list of the elements accounted for in the standards and made an empty dataframe called &lt;code&gt;coefs&lt;/code&gt; to fill with the coefficients of the relationship between pixel intensity and percent weight for each element:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# list of elements
# need to ignore the &amp;quot;mineral&amp;quot; column of the data
elements = [val for val in mineral_standards.columns if val != &amp;#39;mineral&amp;#39;]
coefs = pd.DataFrame(index = [&amp;#39;coeff&amp;#39;], columns = elements)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;linear-regressions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Linear regressions&lt;/h3&gt;
&lt;p&gt;Now we looped through the elements to create linear regressions of percent weight vs. pixel intensity based on the intensities in the standards. For these regressions, we forced the intercept to be zero because zero pixel intensity should imply zero percent weight.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# make a linear regression forcing the intercept to be zero
# since zero intensity should correspond to zero percent weight
lr = LinearRegression(fit_intercept = False)
# loop through elements to create linear regression of percent weight vs pixel intensity
# in the minerals in the standard
for element in elements:
    element_df = mineral_standards[mineral_standards[&amp;#39;mineral&amp;#39;].str.contains(element + &amp;quot;_&amp;quot;)]
    # if the element has no percent weights, skip it
    if element_df.empty:
        continue
    minerals = element_df[&amp;#39;mineral&amp;#39;].unique()
    xis = np.empty(0)
    yis = np.empty(0)
    for mine in minerals:
        # get percent weights of the element in that mineral
        weight = weights[weights[&amp;#39;mineral&amp;#39;] == mine][element]
        intensities = element_df[element_df[&amp;#39;mineral&amp;#39;] == mine][element]
        xis = np.append(xis, np.array(intensities))
        yis = np.append(yis, np.repeat(weight, len(intensities)))

    xis, yis = xis.reshape(-1,1), yis.reshape(-1,1)
    # fit linear regression on percent weight vs intensity
    reg = lr.fit(xis,yis)
    xi_pred =  np.arange(0,900).reshape(-1,1)
    # create predictions for range of intensity values
    pred = reg.predict(xi_pred)
    reg.coef_
    # get the linear regression coefficient for each element
    coefs[element] = float(reg.coef_)

# print the coefficients for each element
## array([[0.11859862]])
## array([[0.32879587]])
## array([[0.32008078]])
## array([[0.21488656]])
## array([[0.46922488]])
## array([[0.07762688]])
## array([[0.09790595]])
print(coefs)
##              Mg        Ni   Al        Fe  ...    P         S        Ti        Si
## coeff  0.118599  0.328796  NaN  0.320081  ...  NaN  0.469225  0.077627  0.097906
## 
## [1 rows x 10 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus &lt;code&gt;coefs&lt;/code&gt; contains the coeficient relating pixel intensity of an element to its percent weight in the mineral: for example, the percent weight of Mg in an mineral is equal to 0.118599 times its pixel intensity.&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;../../../static/img/mineral_regression.png&#34; /&gt;
&lt;figcaption&gt;
X-axes are pixel intensity and y-axes are percent weight of the element. Blue points indicate the pixel intensities of the element for a given percent weight based on a mineral in the standard. Orange points indicate the linear regression calculated above.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;div id=&#34;calculate-percent-weights&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Calculate percent weights&lt;/h3&gt;
&lt;p&gt;Finally, we used these coefficients to calculate the predicted percent weights of each element in the two meteorites we were analyzing on a pixel-by-pixel basis. The code for this portion of the analysis is available in the latter end of &lt;a href=&#34;https://github.com/HackTheSolarSystem/MineralMapping/blob/master/backend/mineral_mapping_script.py&#34;&gt;this script&lt;/a&gt;. Note that for any pixel where the percent weight of an element was predicted to be higher than 100%, we set the percent weight to 100%. From these calculations, we ended up with the following files:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# read file of predicted percent weights for meteorite 1
df_obj1 = pd.read_csv(&amp;#39;../../../static/mineralmapping/predicted_percentweight_obj1.csv&amp;#39;)
df_obj1 = df_obj1.fillna(0)
df_obj1.drop(&amp;#39;Unnamed: 0&amp;#39;, axis = 1, inplace = True)
print(df_obj1.head())

# read file of predicted percent weights for meteorite 2
##          Ca        Ti   Al   Cr  ...    P         Fe        Ni        Mg
## 0  8.595462  0.698642  0.0  0.0  ...  0.0  51.212925  0.986388  5.692734
## 1  4.512618  0.543388  0.0  0.0  ...  0.0  53.453490  1.972775  2.846367
## 2  2.578639  0.465761  0.0  0.0  ...  0.0  63.696075  3.287959  1.067388
## 3  2.148866  0.310508  0.0  0.0  ...  0.0  57.934621  3.945550  0.237197
## 4  1.719092  0.543388  0.0  0.0  ...  0.0  58.254702  3.616755  0.118599
## 
## [5 rows x 10 columns]
df_obj2 = pd.read_csv(&amp;#39;../../../static/mineralmapping/predicted_percentweight_obj2.csv&amp;#39;)
df_obj2 = df_obj2.fillna(0)
df_obj2.drop(&amp;#39;Unnamed: 0&amp;#39;, axis = 1, inplace = True)
print(df_obj2.head())
##           Si    P   Cr   Al  ...        Ca        Mg        Ni         Fe
## 0  22.322556  0.0  0.0  0.0  ...  0.429773  1.304585  4.931938  14.403635
## 1  11.650808  0.0  0.0  0.0  ...  0.000000  0.355796  2.630367  43.530986
## 2   4.601580  0.0  0.0  0.0  ...  0.429773  0.000000  1.643979  54.093652
## 3   2.349743  0.0  0.0  0.0  ...  0.000000  0.000000  0.986388  57.294460
## 4   0.783248  0.0  0.0  0.0  ...  0.000000  0.000000  1.315183  48.972359
## 
## [5 rows x 10 columns]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each row in these .csv files corresponds to a pixel in the original image. Each value gives the predicted percent weight of a given element in that pixel.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;up-next&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Up next&lt;/h2&gt;
&lt;p&gt;Now that we had converted pixel intensities to predicted percent weights, we were ready to use our clustering algorithm to identify potential minerals in the meteorite. Stay tuned for a future post showing how we used DBSCAN to accomplish this!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;further-reading&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;Jeremy Neiman, one of my team members, wrote an excellent &lt;a href=&#34;https://towardsdatascience.com/machine-learning-meteorites-fcd8f6859ed7&#34;&gt;post&lt;/a&gt; describing the challenge in further detail, so check that out for more information.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python in RMarkdown</title>
      <link>/post/2019-02-20-pythonrmd/</link>
      <pubDate>Wed, 20 Feb 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-02-20-pythonrmd/</guid>
      <description>


&lt;div id=&#34;using-python-in-rmarkdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Using Python in RMarkdown&lt;/h2&gt;
&lt;p&gt;In order to write blog posts using Python code, I wanted to figure out a way to include Python code chunks in RMarkdowns. When you insert a code chunk in RMarkdown, you have the option of specifying the language of that chunk: the default is R, but you can also insert a Bash, SQL, Python, etc. code chunk.&lt;/p&gt;
&lt;p&gt;When I attempted to insert a Python code chunk and import libraries, however, I kept getting the error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Error in py_run_string_impl(code, local, convert) :&lt;/code&gt;
&lt;code&gt;ImportError: No module named sklearn.cluster&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From running Python in Atom, I knew I had the &lt;code&gt;sklearn.cluster&lt;/code&gt; module installed, so the problem must be in the connection between R and Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reticulate&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;reticulate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;reticulate&lt;/code&gt; package in R (website &lt;a href=&#34;https://rstudio.github.io/reticulate/index.html&#34;&gt;here&lt;/a&gt; allows R to interact with Python. I installed the package from RStudio.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;reticulate&amp;quot;)
library(reticulate)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;changing-python-versions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changing Python versions&lt;/h2&gt;
&lt;p&gt;Installing &lt;code&gt;reticulate&lt;/code&gt; still didn’t allow me to knit the RMarkdown with a Python code chunk, however. I followed the instructions in &lt;a href=&#34;https://rstudio-pubs-static.s3.amazonaws.com/397064_bd288708515c4b71a6e78dfe91b8bb99.html&#34;&gt;this post&lt;/a&gt; by Pablo Franco to check the Python version that &lt;code&gt;reticulate&lt;/code&gt; was using:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py_discover_config()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I ended up with the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python:         /usr/bin/python
libpython:      /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/config/libpython2.7.dylib
pythonhome:     /System/Library/Frameworks/Python.framework/Versions/2.7:/System/Library/Frameworks/Python.framework/Versions/2.7
version:        2.7.10 (default, Aug 17 2018, 19:45:58)  [GCC 4.2.1 Compatible Apple LLVM 10.0.0 (clang-1000.0.42)]
numpy:          /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy
numpy_version:  1.8.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wanted to be running Python version 3.6, which was the version I had installed using Anaconda, so I needed to change the path.&lt;/p&gt;
&lt;div id=&#34;set-up-chunk&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Set-up chunk&lt;/h3&gt;
&lt;p&gt;I discovered that you can set the path to a different installation of Python by modifying the setup chunk at the start of the RMarkdown. According to the &lt;a href=&#34;https://bookdown.org/yihui/rmarkdown/language-engines.html&#34;&gt;&lt;code&gt;bookdown&lt;/code&gt; website&lt;/a&gt;, the default used is Python 2.&lt;/p&gt;
&lt;p&gt;My default version of this set-up chunk looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can set the chunk option &lt;code&gt;engine.path&lt;/code&gt; to specify the path to the engine interpreter and change it from the default Python 2.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;finding-python-path&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Finding Python path&lt;/h3&gt;
&lt;p&gt;I now needed to find the actual path to Python that I wanted to use. I did this by opening up Python separately from RStudio (I used Atom for this) and running the following (I got the code for this from &lt;a href=&#34;https://www.dummies.com/programming/python/how-to-find-path-information-in-python/&#34;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import sys
for p in sys.path:
    print(p)
## 
## /Library/Frameworks/Python.framework/Versions/3.7/bin
## /Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip
## /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7
## /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload
## /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages
## /Library/Frameworks/R.framework/Versions/3.6/Resources/library/reticulate/python&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this information, I could tell I wanted to use the path &lt;code&gt;/anaconda3/lib/python3.6&lt;/code&gt;, rather than &lt;code&gt;/usr/bin/python&lt;/code&gt;, which is what RMarkdown had originally been using. I modified by set-up chunk to look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{r setup, include=FALSE}
knitr::opts_chunk$set(collapse = TRUE, engine.path = list(python = &amp;#39;/anaconda3/bin/python3.6&amp;#39;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-options&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other options&lt;/h2&gt;
&lt;p&gt;This solution enabled me to knit RMarkdowns with Python code chunks! It changes the engine interpreter globally, which you could do for multiple engines simultaneously, like Python and Ruby, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;knitr::opts_chunk$set(engine.path = list(
  python = &amp;#39;/anaconda3/bin/python3.6&amp;#39;,
  ruby = &amp;#39;/usr/local/bin/ruby&amp;#39;
))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can specify the engine interpreter locally in each code chunk by starting the chunk with &lt;code&gt;{python, engine.path = &#39;/anaconda3/bin/python3.6&lt;/code&gt;}, for example.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>#HackTheSolarSystem</title>
      <link>/post/2019-02-14-hackathon/</link>
      <pubDate>Thu, 14 Feb 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-02-14-hackathon/</guid>
      <description>


&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:40%&#34; src=&#34;/img/hackthesolarsystem.png&#34; /&gt;
&lt;/figure&gt;
&lt;p&gt;Last weekend I had the opportunity to participate in my first ever hackathon: the #HackTheSolarSystem hackathon hosted by the American Museum of Natural History.&lt;/p&gt;
&lt;div id=&#34;what-is-a-hackathon-anyways&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;What is a hackathon, anyways?&lt;/h2&gt;
&lt;p&gt;This is a question I got asked countless times this last week as I informed my friends and family that I would be at work &lt;strong&gt;all&lt;/strong&gt; weekend (yes, including Friday night, yes, including Saturday night, no, I will not be able to socialize at all). And, in fairness, this is a question I wouldn’t have had an answer to prior to this job. A hackathon is an event where participants come together to use technology to address a challenge. Usually, the event takes place over a few days, where hackers form teams and collaborate on their projects, before presenting their solutions.&lt;/p&gt;
&lt;p&gt;When I learned about this concept, I was baffled by the idea that it would be possible to come up with any kind of viable solution to a problem in only 24 hours. Coming from an academic background, I’m used to months of reading papers to get oriented to a problem before I can produce any kind of meaningful code. This event forced us to dive right in, looking at the problem from a computer science standpoint, rather than striving to get the full scientific background on the problem. I was amazed by the ability of all the teams at the event to create meaningful solutions to scientific problems they had not necessarily studied before.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-ammh-hackathon&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The AMMH Hackathon&lt;/h2&gt;
&lt;p&gt;For the past five years, the American Museum of Natural History has hosted a hackathon. #HackTheSolarSystem is the first and only hackathon I have participated in thus far, so I can’t compare it to other events, but my understanding is that the museum seeks to put on a slightly different type of event than other hackathons: AMNH wants to give technologists and scientists the opportunity to work together to create solutions to real research problems. For #HackTheSolarSystem, museum scientists from the Department of Earth and Planetary Science put forth a series of challenges they face in their research that they thought could be solved through technology. These challenges ranged from tracking dust particles through aerogel to visualizing the Sun (a full list of challenges is available &lt;a href=&#34;https://github.com/amnh/HackTheSolarSystem/wiki/Challenges&#34;&gt;here&lt;/a&gt;). In addition to the scientific challenges, there were also educational challenges for both high school students and educators.&lt;/p&gt;
&lt;p&gt;On Friday night, the museum “stakeholders”, i.e. the scientists posing the challenges, presented their challenges and led participants on tours of various areas of the museum, like the Hall of Meteorites and the Earth and Planetary Sciences department. Then, from Saturday at 2:00 pm to Sunday at 1:00 pm, us hackers stayed at the museum to develop solutions to our chosen challenges. Most hackers worked on teams formed at the event, although some corporate teams came into the hackathon with a team already formed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-challenge&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;I chose to work on the meteorite mineral mapping challenge: our “stakeholders”, museum scientists Marina Gemma and Sam Alpert, wanted a way to identify mineral composition in images of meteorites. Each meteorite slice had been imaged, resulting in data consisting of pixel intensity for a handful of elements. We also had access to a series of standards with known mineral content so we could compare the pixel intensities in these known minerals with the pixel intensities in the unknown minerals.&lt;/p&gt;
&lt;p&gt;Our team (pictured below) used four different approaches to address this problem: linear classification via SVM, random forest classification, nearest neighbor classification, and cluster inference. You can check out more details on these solutions in the Readme of our GitHub repository: &lt;a href=&#34;https://github.com/HackTheSolarSystem/MineralMapping&#34; class=&#34;uri&#34;&gt;https://github.com/HackTheSolarSystem/MineralMapping&lt;/a&gt;. (And I will post a more detailed explanation of the clustering solution in a later post, which is the part of the code I focused on!)&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;/img/hackathon_team.jpg&#34; /&gt;
&lt;figcaption&gt;
From left to right: Peter Kang, Jackson Lee, Jeremy Neiman, John Underwood, Katy Abbott, Cecina Babich Morrow, Meret Götschel
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our solution ended up making us one of the four primary winning teams at the hackathon! We won the “LabCoat Knockout” award for creating a solution with the potential to change the nature of research. We plan to continue working with our museum stakeholders to fine-tune our code so that it can be used in their research in the future. To me, that is the most exciting part of this event - that a group of technologists from diverse backgrounds (none of which knew much about meteorites before this event!) could write code in 24 hours with the potential to solve a scientific problem with a concrete impact on research at the museum.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Grafting phylogenies</title>
      <link>/post/2019-01-09-grafting-trees/</link>
      <pubDate>Fri, 18 Jan 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-01-09-grafting-trees/</guid>
      <description>


&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;/img/bodymass_tetrapod_tree.png&#34; /&gt;
&lt;/figure&gt;
&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Inspiration for this post&lt;/h1&gt;
&lt;p&gt;This post comes from the finishing touches I needed to put on a paper about &lt;a href=&#34;https://babichmorrowc.github.io/project/life_history/&#34;&gt;life history evolution&lt;/a&gt;. The paper compares life history traits across the four groups of tetrapods (amphibians, reptiles, mammals, and birds), so when I carried out the nitty gritty phylogenetic analyses, I used four separate phylogenies. When it came time to make a figure to visualize those analyses, however, I ended up with an unwieldy (and unpublishable) 16-panel figure (four phylogenies by four traits). One of my coauthors suggested using a tetrapod supertree to visualize the evolution of the traits across all four classes simultaneously.&lt;/p&gt;
&lt;div id=&#34;uyeda-et-al.-2017&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Uyeda et al. 2017&lt;/h2&gt;
&lt;p&gt;Uyeda et al. did something similar in their 2017 paper &lt;a href=&#34;https://www.journals.uchicago.edu/doi/10.1086/692326&#34;&gt;The evolution of energetic scaling across the vertebrate tree of life&lt;/a&gt;. They stitched together fish, amphibian, squamate, bird, and mammal phylogenies together to visualize metabolic rate across all vertebrates:&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/uyeda_figure.png&#34; /&gt;
&lt;figcaption&gt;
Figure 1 from Uyeda et al. 2017
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;At first, I was very hopeful that I would be able to download this supertree and prune it to the taxa in my analysis since the authors were using the same clade specific phylogenies that I was. The phylogeny is available on Data Dryad (&lt;a href=&#34;https://datadryad.org/resource/doi:10.5061/dryad.3c6d2&#34; class=&#34;uri&#34;&gt;https://datadryad.org/resource/doi:10.5061/dryad.3c6d2&lt;/a&gt;). Unfortunately, after downloading that phylogeny and pruning it to include species I used in my analysis, I ended up with approximately 15% of the species I analyzed in the resulting tree.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;into-the-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Into the code&lt;/h1&gt;
&lt;p&gt;Since my easy solution didn’t pan out and I couldn’t get enough information from the supplemental material for the paper to replicate their analyses, I looked on GitHub to try to find Uyeda’s code. Hooray for GitHub once again, because the repository for the paper can be found here: &lt;a href=&#34;https://github.com/uyedaj/bmr&#34; class=&#34;uri&#34;&gt;https://github.com/uyedaj/bmr&lt;/a&gt;. The &lt;a href=&#34;https://github.com/uyedaj/bmr/blob/master/R/ManuscriptNotebook.Rmd&#34;&gt;RMarkdown&lt;/a&gt; details the analyses for the paper, including the process for making the full tree.&lt;/p&gt;
&lt;p&gt;Start with loading the necessary packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(phytools)
## Loading required package: ape
## Warning: package &amp;#39;ape&amp;#39; was built under R version 3.5.2
## Loading required package: maps
library(geiger)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-original-phylogenies&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The original phylogenies&lt;/h2&gt;
&lt;p&gt;I was working with four separate phylogenies: amphibians, squamates, birds, and mammals. For amphibians, I used a congruified time-tree from the &lt;code&gt;PhyloOrchard&lt;/code&gt; package (O’Meara et al. 2013) that was constructed using the Alfaro et al. timetree of gnathostomes (Alfaro et al. 2009) as the reference and the Pyron and Wiens amphibian phylogeny as the target (Pyron and Wiens 2011).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(amphibiantree$tip.label)
## [1] 2871
plot(amphibiantree, type = &amp;quot;fan&amp;quot;, show.tip.label = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For squamates, I used the Zheng and Wiens time-calibrated phylogeny (Zheng and Wiens 2016).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(squamatetree$tip.label)
## [1] 378
plot(squamatetree, type = &amp;quot;fan&amp;quot;, show.tip.label = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For birds, I used the Jetz phylogeny (Jetz et al. 2012).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(birdtree$tip.label)
## [1] 9993
plot(birdtree, type = &amp;quot;fan&amp;quot;, show.tip.label = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;For mammals, I used the supertree from Fritz et al. 2009.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(mammaltree$tip.label)
## [1] 5020
plot(mammaltree, type = &amp;quot;fan&amp;quot;, show.tip.label = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-in-trees&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reading in trees&lt;/h2&gt;
&lt;p&gt;The first step of the process is reading in the individual phylogenies you want to stitch together. This step is straightforward, with one exception: you cannot have species that are present in multiple of the individual trees. For example, my squamate phylogeny included &lt;em&gt;Gallus gallus&lt;/em&gt; (red junglefowl) and &lt;em&gt;Dromaius novaehollandia&lt;/em&gt; (emu). Since these species were also present in my bird phylogeny, I got the following error: &lt;code&gt;Found matching tips in &#39;subtree&#39; and &#39;phy&#39;&lt;/code&gt;. To solve this problem, I just removed these tips from the squamate tree:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;squamatetree &amp;lt;- drop.tip(phy = squamatetree, tip = c(&amp;quot;Gallus_gallus&amp;quot;, &amp;quot;Dromaius_novaehollandiae&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I ended up with the following list of trees and corresponding tip labels:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tree_list &amp;lt;- list(amphib=amphibiantree, birds=birdtree, squam=squamatetree, mamm=mammaltree)
class(tree_list) &amp;lt;- &amp;quot;multiPhylo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;make-a-tree-with-orders&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Make a tree with orders&lt;/h2&gt;
&lt;p&gt;In Uyeda et al. (2017), the authors were creating a phylogeny for all vertebrates, but for my analyses I was only examining tetrapods, so I didn’t have a fish phylogeny to include. The original code from Uyeda et al. to create a tree with the 5 vertebrate orders looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tip.labels &amp;lt;- c(&amp;quot;fish&amp;quot;, &amp;quot;amphib&amp;quot;, &amp;quot;squam&amp;quot;, &amp;quot;birds&amp;quot;, &amp;quot;mamm&amp;quot;)

## Make a tree with just orders:
edge &amp;lt;- matrix(c(9, 4,
  9, 3,
  8, 5,
  8, 9,
  7, 8,
  7, 2,
  6, 7,
  6, 1), byrow=TRUE, ncol=2)
## Dates from Timetree of life (timetree.org)
edge.length &amp;lt;- c(274.9, 274.9, 324.5, 324.5-274.9, 382.9-324.5, 382.9, 454.6-382.9 , 454.6)
Nnode &amp;lt;- 4
ordertree &amp;lt;- list(edge=edge, Nnode=Nnode, tip.label=tip.labels, edge.length=edge.length)
class(ordertree) &amp;lt;- &amp;#39;phylo&amp;#39;
plot(ordertree)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To visualize the results, we can add tip labels, node labels, and edge labels to the tree with the branch lengths:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(ordertree)
tiplabels()
nodelabels()
edgelabels(ordertree$edge.length, bg=&amp;quot;black&amp;quot;, col=&amp;quot;white&amp;quot;, font=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;getting-rid-of-fish&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Getting rid of fish&lt;/h3&gt;
&lt;p&gt;Since I didn’t have fish, I needed to make a few modifications. First, &lt;code&gt;tip.labels&lt;/code&gt; didn’t need “fish” in it anymore:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# remove &amp;quot;fish&amp;quot; from tip.labels:
tip.labels &amp;lt;- c(&amp;quot;amphib&amp;quot;, &amp;quot;squam&amp;quot;, &amp;quot;birds&amp;quot;, &amp;quot;mamm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, for the trickier part - I needed to modify the edge matrix. The edge matrix contains the starting and ending nodes for each edge in a tree. As we can see from the plot above, numbering works in the following way: the tips are numbered starting at the top from 1 to the number of tips and the nodes are numbered starting at the root and moving towards the tips. To get rid of fish, I needed to delete one tip from the tree and one node (the original root node). I sketched out what I wanted the new order tree to look like, complete with numbered nodes and tips, and created the following edge matrix:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edge &amp;lt;- matrix(c(7, 3,
  7, 2,
  6, 4,
  6, 7,
  5, 6,
  5, 1), byrow=TRUE, ncol=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since I was losing two edges from the phylogeny (the one going from the root to fish and the one from the root to the last common ancestor of tetrapods), I also needed to modify the edge lengths by removing 454.6-382.9 and 454.6:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;edge.length &amp;lt;- c(274.9, 274.9, 324.5, 324.5-274.9, 382.9-324.5, 382.9)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final modification I needed was to decrease &lt;code&gt;Nnode&lt;/code&gt; from 4 to 3:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Nnode &amp;lt;- 3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now…&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ordertree &amp;lt;- list(edge=edge, Nnode=Nnode, tip.label=tip.labels, edge.length=edge.length)
class(ordertree) &amp;lt;- &amp;#39;phylo&amp;#39;
plot(ordertree)
edgelabels(ordertree$edge.length, bg=&amp;quot;black&amp;quot;, col=&amp;quot;white&amp;quot;, font=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;…I was ready to go with an order-level tree onto which I could graft my individual phylogenies!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;node-dates&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Node dates&lt;/h3&gt;
&lt;p&gt;…Not so fast. I ended up with an additional problem I needed to solve before grafting the trees together. I ran into the error &lt;code&gt;&#39;split_age&#39; is inconsistent with edge lengths in &#39;phy&#39;&lt;/code&gt;, which means that the earliest node in one of my individual phylogenies was older than the node age I gave in &lt;code&gt;edge.length&lt;/code&gt;. By &lt;a href=&#34;https://babichmorrowc.github.io/post/debug-r/&#34;&gt;using &lt;code&gt;debug&lt;/code&gt;&lt;/a&gt;, I was able to tell that the error occurred when I added the squamate tree. The oldest node in my squamate tree was 277.8 million years ago, but I had set the divergence time between birds and squamates at 274.9 mya, so R was having problems. The species causing the problem was the tuatara, which is the only surviving member of its order.&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/tuatara.png&#34; /&gt;
&lt;figcaption&gt;
The pesky (yet very cute) tuatara (&lt;a href=&#34;https://www.australiangeographic.com.au/blogs/creatura-blog/2017/12/the-tuatara/&#34; class=&#34;uri&#34;&gt;https://www.australiangeographic.com.au/blogs/creatura-blog/2017/12/the-tuatara/&lt;/a&gt;)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I had a couple of choices: either delete the tuatara from the squamate phylogeny or increase the age of the last common ancestor of birds and squamates when I created the vector &lt;code&gt;edge.length&lt;/code&gt;. I chose to do the latter because why get rid of such a cool animal!&lt;/p&gt;
&lt;p&gt;I went to &lt;a href=&#34;http://timetree.org/&#34; class=&#34;uri&#34;&gt;http://timetree.org/&lt;/a&gt; to see if I could find a reasonable range of estimates for this node. According to the website, which allows you to search for the divergence time between any two taxa, the estimated divergence of birds and squamates occurred 280 mya.&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/timetree_birdsquamate.png&#34; /&gt;
&lt;figcaption&gt;
TimeTree results for divergence time of birds and squamates.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So I ended up with the following code and order tree:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tip.labels &amp;lt;- c(&amp;quot;amphib&amp;quot;, &amp;quot;squam&amp;quot;, &amp;quot;birds&amp;quot;, &amp;quot;mamm&amp;quot;)
edge &amp;lt;- matrix(c(7, 3,
  7, 2,
  6, 4,
  6, 7,
  5, 6,
  5, 1), byrow=TRUE, ncol=2)
edge.length &amp;lt;- c(280, 280, 324.5, 324.5-274.9, 382.9-324.5, 382.9)
Nnode &amp;lt;- 3
ordertree &amp;lt;- list(edge=edge, Nnode=Nnode, tip.label=tip.labels, edge.length=edge.length)
class(ordertree) &amp;lt;- &amp;#39;phylo&amp;#39;
plot(ordertree)
edgelabels(ordertree$edge.length, bg=&amp;quot;black&amp;quot;, col=&amp;quot;white&amp;quot;, font=2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tree_list &amp;lt;- list(amphib=amphibiantree, birds=birdtree, squam=squamatetree, mamm=mammaltree)
class(tree_list) &amp;lt;- &amp;quot;multiPhylo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;grafting-the-trees&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Grafting the trees&lt;/h2&gt;
&lt;p&gt;The final step is grafting the individual trees onto the order tree in the proper place.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Add taxonomic information to tree
otax &amp;lt;- data.frame(&amp;quot;Class&amp;quot;= ordertree$tip.label, &amp;quot;Superclass&amp;quot;=c(rep(&amp;quot;Tetrapoda&amp;quot;,2)))
rownames(otax) &amp;lt;- ordertree$tip.label
classtree &amp;lt;- nodelabel.phylo(ordertree, otax, ncores=1)

res &amp;lt;- glomogram.phylo(classtree, tree_list)
plot(res, type = &amp;quot;fan&amp;quot;, show.tip.label = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-01-09-grafting-trees_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Voila - a tree with 18262 species of tetrapods!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;disclaimer&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Disclaimer&lt;/h1&gt;
&lt;p&gt;I’d like to finish this post with a disclaimer: I am NOT a phylogeneticist (yet?). The supertree created in this analysis incorporates several different phylogenies from literature and adapts code from another published article (all written by people with much more phylogenetic background than I!). However, the accuracy of the tree decreases as you move back in time - there is a great deal of uncertainty about node age for the deeper nodes in the tree. Even so, this process allows us to make some cool visualizations to compare major clades across vast stretches of evolutionary time - even if precise dates are incorrect, overall patterns are still informative!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Code&lt;/h1&gt;
&lt;p&gt;The entire script I used for this process can be found at &lt;a href=&#34;https://github.com/KerkhoffLab/bodymasspatterns/blob/master/tetrapod_phylogeny_code.R&#34; class=&#34;uri&#34;&gt;https://github.com/KerkhoffLab/bodymasspatterns/blob/master/tetrapod_phylogeny_code.R&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;literature-cited&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Literature Cited&lt;/h1&gt;
&lt;p&gt;Alfaro, M. E., F. Santini, C. Brock, H. Alamillo, A. Dornburg, D. L. Rabosky, G. Carnevale, and L. J. Harmon. 2009. Nine exceptional radiations plus high turnover explain species diversity in jawed vertebrates. PNAS 106:13410-13414.&lt;/p&gt;
&lt;p&gt;Fritz, S. A., O. R. P. Bininda-Emonds, and A. Purvis. 2009. Geographical variation in predictors of mammalian extinction risk: big is bad, but only in the tropics. Ecology Letters 12:538–549.&lt;/p&gt;
&lt;p&gt;Jetz, W., G. H. Thomas, J. B. Joy, K. Hartmann, and A. O. Mooers. 2012. The global diversity of birds in space and time. Nature 491:444.&lt;/p&gt;
&lt;p&gt;O’Meara, B. C., L. J. Harmon, and J. Eastman. 2013. PhyloOrchard: Important and/or useful phylogenetic datasets.&lt;/p&gt;
&lt;p&gt;Pyron, R. A. and J. J. Wiens. 2011. A large-scale phylogeny of Amphibia including over 2800 species, and a revised classification of extant frogs, salamanders, and caecilians. Molecular Phylogenetics and Evolution 61: 543-583.&lt;/p&gt;
&lt;p&gt;Uyeda JC, Pennell MW, Miller ET, Maia R, McClain CR (2017) The evolution of energetic scaling across the vertebrate tree of life. The American Naturalist 190(2): 185-199. &lt;a href=&#34;https://doi.org/10.1086/692326&#34; class=&#34;uri&#34;&gt;https://doi.org/10.1086/692326&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Uyeda JC, Pennell MW, Miller ET, Maia R, McClain CR (2017) Data from: The evolution of energetic scaling across the vertebrate tree of life. Dryad Digital Repository. &lt;a href=&#34;https://doi.org/10.5061/dryad.3c6d2&#34; class=&#34;uri&#34;&gt;https://doi.org/10.5061/dryad.3c6d2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Zheng, Y., and J. J. Wiens. 2016. Combining phylogenomic and supermatrix approaches, and a time-calibrated phylogeny for squamate reptiles (lizards and snakes) based on 52 genes and 4162 species. Molecular Phylogenetics and Evolution 94:537–547.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Macroevolution of dimensionless life history metrics in tetrapods</title>
      <link>/publication/lifehistory/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 -0500</pubDate>
      <guid>/publication/lifehistory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Debugging in R</title>
      <link>/post/2019-01-03-debugging-r/</link>
      <pubDate>Thu, 03 Jan 2019 21:13:14 -0500</pubDate>
      <guid>/post/2019-01-03-debugging-r/</guid>
      <description>


&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/PhD_Debugging.png&#34; /&gt;
&lt;figcaption&gt;
PhD comics Jorge Cham (www.phdcomics.com)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Recently I’ve been part of beta testing a new R package. The package allows users to apply different masks to spcies distribution models to create more ecologically realistic range models. The package itself is very cool, but since it hasn’t been released yet, this post will be short on ecology. Instead, I’m going to focus on the process I’ve been using to debug the package. This debugging thought process and the different functions that make it possible are things I wish I’d been formally taught while learning R (but better late than never!).&lt;/p&gt;
&lt;div id=&#34;traceback&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;traceback&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;traceback()&lt;/code&gt; function is definitely one of those that I wished I learned sooner. Basically, &lt;code&gt;traceback()&lt;/code&gt; shows you the series of functions called, including the one resulting in the last error. For example, when I ran &lt;code&gt;traceback()&lt;/code&gt; after the function I was testing threw an error, I got the following readout:&lt;/p&gt;
&lt;figure&gt;
&lt;img class=&#34;special-img-class&#34; style=&#34;width:100%&#34; src=&#34;/img/traceback_example.png&#34; /&gt;
&lt;/figure&gt;
&lt;p&gt;When I tried to use the function &lt;code&gt;rangeSVM()&lt;/code&gt;, I got an error, as we can see in the first line of code I ran. By running &lt;code&gt;traceback()&lt;/code&gt;, I can see the order of functions that &lt;code&gt;rangeSVM()&lt;/code&gt; uses: first, it called the &lt;code&gt;svm()&lt;/code&gt; function from the R package &lt;code&gt;e1071&lt;/code&gt;, which in turn called &lt;code&gt;svm.formula()&lt;/code&gt;, which finally called &lt;code&gt;svm.default()&lt;/code&gt;. This last function, &lt;code&gt;svm.default()&lt;/code&gt; is what produced the error (as we can see from the error message, as well).&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;traceback()&lt;/code&gt; can be especially helpful in situations like this, where the error message comes from a function called internally by the function you actually ran. Here, the error does not come from the &lt;code&gt;rangeSVM()&lt;/code&gt; function, so reading the documentation for &lt;code&gt;rangeSVM()&lt;/code&gt; could not save me. Now I know that the error actually comes from a function in the &lt;code&gt;e1071&lt;/code&gt; package, so I could check out the source code to figure out what kind of issue causes that error message.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;checking-source-code&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Checking source code&lt;/h1&gt;
&lt;p&gt;There is a &lt;a href=&#34;https://github.com/cran&#34;&gt;CRAN GitHub account&lt;/a&gt; that is an unofficial read-only mirror of all CRAN packages. Typically, when I want to read through the code for a particular function in a package, this is what I use. To dig a little deeper into what was going wrong with the &lt;code&gt;svm()&lt;/code&gt; function, I found the code &lt;a href=&#34;https://github.com/cran/e1071/blob/master/R/svm.R&#34;&gt;here&lt;/a&gt;. This allowed me to look at the function definitions for &lt;code&gt;svm.formula()&lt;/code&gt; as well as &lt;code&gt;svm.default()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;debug&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Reading through the source code is helpful, but wouldn’t it be even better if you could watch R step through the function line by line until the error? Fortunately the handy &lt;code&gt;debug()&lt;/code&gt; function does exactly that. By running the following:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;debug(rangeSVM)
svmHYB_weight &amp;lt;- rangeSVM(variegatus[,2:3], tridactylus[,2:3], sdm = raster::stack(var_sdm, tri_sdm), nrep = 3, weight = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I could see that the error occurred at line 100 of &lt;code&gt;svm.R&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Browse[2]&amp;gt; 
# debug at /Users/hellenfellows/OneDrive - AMNH/Wallace/maskRangerBetaTesting/maskRangeR/R/svm.R#100: m &amp;lt;- e1071::svm(sp ~ ., data = xy, gamma = params_best_df_mostFreq$gamma[1], 
#     cost = params_best_df_mostFreq$cost[1], class.weights = cw)
# Browse[2]&amp;gt; 
# Error in svm.default(x, y, scale = scale, ..., na.action = na.action) : 
#   NA/NaN/Inf in foreign function call (arg 10)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Browse&amp;gt;&lt;/code&gt; prompt at the beginning of the lines indicate that the debugger is working. The &lt;code&gt;debug at&lt;/code&gt; part shows the next line of code to be executed when you hit enter next. R will continue to show you the following line of code as you press enter (up until you hit the error). If you are running all of this in RStudio, it will also conveniently highlight the lines in the source code that will be run next. Also, when you want to get out of the debugger so you can run that function again later without debugging, run &lt;code&gt;undebug(rangeSVM)&lt;/code&gt;, for example.&lt;/p&gt;
&lt;p&gt;My initial suspicion was that the function was failing during one of the runs of a for loop, however the debugger showed me that the function was making it through all the runs of the for loop. Instead, the error occurred during the final step of &lt;code&gt;rangeSVM()&lt;/code&gt; when the function attempted to integrate the results of all runs of the for loop to create a final support vector machine model.&lt;/p&gt;
&lt;div id=&#34;get&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;get&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To figure out why this problem was occurring, I wanted to be able to see the values of the different variables passeed to that final step of the function. Handily enough, while in the debugger, you can use the function &lt;code&gt;get(&amp;quot;variable&amp;quot;)&lt;/code&gt; to check the status of the different variables (the name of the variable needs to be in quotation marks).&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;debug(rangeSVM)
svmHYB &amp;lt;- rangeSVM(variegatus[,2:3], tridactylus[,2:3], sdm = raster::stack(var_sdm, tri_sdm), nrep = 3)
# Browse[2]&amp;gt; 
# debug at /Users/hellenfellows/OneDrive - AMNH/Wallace/maskRangerBetaTesting/maskRangeR/R/svm.R#96: params_best_df$params &amp;lt;- paste0(params_best_df$gamma, params_best_df$cost)

# Browse[2]&amp;gt; get(&amp;quot;params_best_df&amp;quot;)
#        gamma cost class.weights
# 38 0.5000000    2             1
# 85 0.0078125 2048             1
# 95 0.0078125 8192             1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was the final step of the process that actually allowed me to figure out the problem:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Browse[2]&amp;gt; get(&amp;quot;params_best_df_mostFreq&amp;quot;)
# [1] gamma cost 
# &amp;lt;0 rows&amp;gt; (or 0-length row.names)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without going into too much detail about the function itself, I was able to tell that the parameters I was feeding into the support vector machine function somehow didn’t exist: the variable &lt;code&gt;params_best_df_mostFreq&lt;/code&gt; had 0 rows.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;other-tips-and-tricks&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Other tips and tricks&lt;/h1&gt;
&lt;p&gt;I got much of these resources from a very helpful blog post called &lt;a href=&#34;https://petewerner.blogspot.com/2013/01/tracking-down-errors-in-r.html&#34;&gt;“Tracking down errors in R”&lt;/a&gt; by Pete Werner (also available as a post on &lt;a href=&#34;https://www.r-bloggers.com/tracking-down-errors-in-r/&#34;&gt;R-bloggers&lt;/a&gt;). This post goes through a slightly simpler example of debugging which is reproducible (something I have not attempted to do here), so it is very helpful for seeing the process on a simpler function. In addition to the techniques I used, Pete also explains how you can turn warning messages into errors in the case that your function is throwing a troubling warning message that you suspect is causing an error later on.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Adding Google Docs to website</title>
      <link>/post/2018-12-12-add-google-doc/</link>
      <pubDate>Wed, 12 Dec 2018 21:13:14 -0500</pubDate>
      <guid>/post/2018-12-12-add-google-doc/</guid>
      <description>


&lt;p&gt;&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/google_docs_fig.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Given that the Academic website theme comes with a place to upload talks, I thought I might as well upload the slides for my Senior Honors presentation. Unfortunately, this was a slightly more difficult task than I anticipated. The default format for slides in Hugo appears to be Markdown slides, which is fine, except when your talk was made in Google Slides.&lt;/p&gt;
&lt;div id=&#34;google-slides-to-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Google Slides to Markdown?&lt;/h2&gt;
&lt;p&gt;My first thought was that there must be some tool to convert a Google slides talk into a Markdown document. For whatever reason, there are several tools (like &lt;a href=&#34;https://github.com/gsuitedevs/md2googleslides&#34;&gt;this GitHub repo&lt;/a&gt;) to go the other direction, from Markdown to Google slides. I found a GitHub repo &lt;a href=&#34;https://github.com/mangini/gdocs2md&#34;&gt;&lt;code&gt;gdocs2md&lt;/code&gt;&lt;/a&gt; that claimed to go in the other direction, but the script provided doesn’t currently run (if anyone is a whiz at Google Apps and wants to take a stab at fixing up this code, it would be a great tool!). There is a Google Drive add-on called &lt;a href=&#34;https://chrome.google.com/webstore/detail/gd2md-html/igffnbdfnodiaphfmfaiiaegmoljbghf&#34;&gt;GD2md-html&lt;/a&gt; that converts Google Docs to Markdown or HTML, which should be useful for the future, but it doesn’t help with Google Slides.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;embedding-google-slides-in-hugo&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Embedding Google Slides in Hugo&lt;/h2&gt;
&lt;p&gt;Having abandoned the idea of just converting my current slides into Markdown and going on my merry way, I started looking for a way to embed the Google Slides themselves into my website.&lt;/p&gt;
&lt;div id=&#34;hugo-shortcodes&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hugo shortcodes&lt;/h3&gt;
&lt;p&gt;Hugo has certain snippets called &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;shortcodes&lt;/a&gt; that are designed to address the problem of having to add raw HTML into Markdown. These shortcodes help render a content file according to a template created by Hugo. For example, the shortcode &lt;code&gt;figure&lt;/code&gt; adds HTML functionality to the Markdown image syntax. There are shortcodes for Instagram (&lt;code&gt;instagram&lt;/code&gt;), Vimeo (&lt;code&gt;vimeo&lt;/code&gt;) and Twitter (&lt;code&gt;tweet&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-gdocs-shortcode&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;The &lt;code&gt;gdocs&lt;/code&gt; shortcode&lt;/h3&gt;
&lt;p&gt;One of these shortcodes, &lt;code&gt;gdocs&lt;/code&gt;, allows you to embed all Google doc types (Slides, Docs, Sheets, etc.) into your website. The HTML code for the shortcode can be found in the &lt;code&gt;hugo-academic&lt;/code&gt; GitHub repo: &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/layouts/shortcodes/gdocs.html&#34; class=&#34;uri&#34;&gt;https://github.com/gcushen/hugo-academic/blob/master/layouts/shortcodes/gdocs.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I tried inserting the following into the &lt;code&gt;index.md&lt;/code&gt; file for my talk below the line with three &lt;code&gt;+&lt;/code&gt; signs:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;{{&amp;lt; gdocs &amp;quot;https://docs.google.com/presentation/d/e/2PACX-1vTsSj-oftLksGEKTkzCoBSIpzooO61ZMGAUzoGBv7u20OzMQK8ctX3gCpWTMm4UowrrWumFrdQsY0Cd/embed?start=false&amp;amp;loop=false&amp;amp;delayms=5000&amp;quot; &amp;gt;}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I got the URL by going to my Google Slides, and clicking File &amp;gt; Publish to the web. I selected Embed and copied the link following &lt;code&gt;src=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, this didn’t result in anything showing up on my page besides a large blank space where I assume Hugo was trying to put my presentation. I tried some variations on the above code, including adding &lt;code&gt;src=&lt;/code&gt; before the URL (no change), and moving the entire code snippet above the &lt;code&gt;+++&lt;/code&gt; line in &lt;code&gt;index.md&lt;/code&gt; (results in the error &amp;quot; unmarshal failed: Near line 65 (last key parsed ‘image’): bare keys cannot contain ‘{’ “).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;html-code&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;HTML code&lt;/h3&gt;
&lt;p&gt;At this point, I was feeling pretty discouraged, when I happened upon a &lt;a href=&#34;https://discourse.gohugo.io/t/shortcode-for-google-slide-presentation-embed/3464&#34;&gt;Hugo forum post&lt;/a&gt; with the HTML code someone used to embed a Google Slides presentation. I have hardly any familiarity with HTML, but clearly shortcodes and I weren’t getting along very well, so I decided to give it a shot. I copied and pasted the code from the forum, replacing the URL following &lt;code&gt;src=&lt;/code&gt; with my link from above, and voila! My slides appeared on the post.&lt;/p&gt;
&lt;p&gt;Here is the code for reference:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;iframe src=&amp;quot;https://docs.google.com/presentation/d/e/2PACX-1vTsSj-oftLksGEKTkzCoBSIpzooO61ZMGAUzoGBv7u20OzMQK8ctX3gCpWTMm4UowrrWumFrdQsY0Cd/embed?start=false&amp;amp;loop=false&amp;amp;delayms=5000&amp;quot; frameborder=&amp;quot;0&amp;quot; width=&amp;quot;800&amp;quot; height=&amp;quot;600&amp;quot; allowfullscreen=&amp;quot;true&amp;quot; mozallowfullscreen=&amp;quot;true&amp;quot; webkitallowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;moral-of-the-story&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Moral of the story&lt;/h2&gt;
&lt;p&gt;It seems like shortcodes can be a really valuable feature of Hugo, especially should I ever need to include a video of some kind (or if I actually start using Twitter again &lt;em&gt;and&lt;/em&gt; tweet something worth sharing, two improbable events). In the case of Google Docs/Sheets/etc., however, just using the HTML code snippet seems like the easiest option (and is a good motivation to learn HTML at a later date).&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ordering website components</title>
      <link>/post/2018-12-11-order-items/</link>
      <pubDate>Tue, 11 Dec 2018 21:13:14 -0500</pubDate>
      <guid>/post/2018-12-11-order-items/</guid>
      <description>


&lt;p&gt;&lt;img class=&#34;special-img-class&#34; style=&#34;width:50%&#34; src=&#34;/img/out_of_order.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;As I continue setting up this site, one of the major things irking me was the order of content on the website. For example, I wasn’t loving that the first thing you saw when visiting the site was the giant picture of my face. I wanted to be able to put content at the top of the site and move information like my bio and work experience towards the bottom. Hugo allows you to weight certain types of content to change the order, so that’s what I tackled.&lt;/p&gt;
&lt;div id=&#34;menu-links&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Menu links&lt;/h2&gt;
&lt;p&gt;The first order of things I could change was the order of links in the menu on the top right of my page. In this case, I wanted my information to be the first link, followed by “Publications”, “Projects”, “Posts”, “Tutorials”, and “Contact”. The weighting for these links is found in the &lt;code&gt;config.toml&lt;/code&gt; file of the website repo, where a standard entry for one of the links looks a bit like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;[[menu.main]]
  name = &amp;quot;Publications&amp;quot;
  url = &amp;quot;#publications&amp;quot;
  weight = 2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you can change the “name”, which is what the menu option actually says (e.g. I changed the menu option for my bio from “Home” to “About”). The URL refers to where on the site the link will point to. If you are trying to link to a homepage widget, as in the example above, the url will be &lt;code&gt;#&lt;/code&gt; followed by the file name of that widget in the &lt;code&gt;content/home/&lt;/code&gt; folder. You want to be careful not to link to a widget that is inactive (which you can see in the first few lines of the Markdown document for that widget), otherwise the link will not go anywhere.&lt;/p&gt;
&lt;p&gt;If you are linking to something else, you can provide the file-path relative to the &lt;code&gt;content&lt;/code&gt; folder – for example, my tutorials live in the folder &lt;code&gt;content/tutorial&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;[[menu.main]]
  name = &amp;quot;Tutorials&amp;quot;
  url = &amp;quot;/tutorial/&amp;quot;
  weight = 5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, you can change the weights to reflect the order you want the links to appear in the menu: the links will appear from left to right in ascending order of weight (&lt;code&gt;weight = 1&lt;/code&gt; is the first link, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;home-page-content&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Home page content&lt;/h2&gt;
&lt;p&gt;Initially, I confused changing the weights in the &lt;code&gt;config.toml&lt;/code&gt; file with actually changing the order of those sections on the home page, but doing that actually requires editing the Markdown files for those types of content in the &lt;code&gt;content/home/&lt;/code&gt; folder. For example, I decided I wanted to put posts first, so I went to &lt;code&gt;content/home/posts.md&lt;/code&gt; and modified the &lt;code&gt;weight&lt;/code&gt; argument so that it was lowest and continued editing the weights until everything was in the order I wanted.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating this website</title>
      <link>/post/2018-12-7-create-website/</link>
      <pubDate>Fri, 07 Dec 2018 21:13:14 -0500</pubDate>
      <guid>/post/2018-12-7-create-website/</guid>
      <description>


&lt;p&gt;&lt;img class=&#34;special-img-class&#34; style=&#34;width:75%&#34; src=&#34;/img/website_fig.png&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;getting-started&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;I’ve been contemplating the idea of creating a website for sometime, but my initial (mostly half-hearted) attempts ran into some serious technological glitches. I started out trying to create a GitHub site using Jekyll, since I knew I wanted my website to be hosted via GitHub to keep all of my code in the same place. After about an hour of unsuccessful commits that resulted in a lovely white page with my name on it, I scrapped the whole venture until I heard about the &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34;&gt;&lt;code&gt;blogdown&lt;/code&gt;&lt;/a&gt; R package. Since R is my programming language of choice, the idea of being able to write posts in RMarkdown and preview my site from the comfort of RStudio was tremendously appealing. I saw a research site created through Hugo’s Academic theme using &lt;code&gt;blogdown&lt;/code&gt; that referenced some helpful tutorials and decided to give the process another shot.&lt;/p&gt;
&lt;div id=&#34;hugo-blogdown&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Hugo + &lt;code&gt;blogdown&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;After my initial failures with Jekyll, I knew enough about the process (and my own skills) to be wary of the Academic theme’s optimistic tagline “Create a beautifully simple site in under 10 minutes”. So fair warning: getting this site up and semi-running was the work of an afternoon plus. I am not going to provide a full tutorial here, since several excellent ones already exist, but I will give my input on which resources worked for me and where I had difficulties.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;useful-resources&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Useful resources&lt;/h2&gt;
&lt;p&gt;I started out following &lt;a href=&#34;https://amber.rbind.io/blog/2016/12/19/creatingsite/&#34;&gt;Amber Thomas’s instructions&lt;/a&gt; for using &lt;code&gt;blogdown&lt;/code&gt;, Hugo, and GitHub pages to create a website. I probably should have taken better note of her initial disclaimer that simpler methods of creating a site exist, but nonetheless I found her instructions useful for wrapping my head around the method behind the whole process. As she explains, GitHub pages and Hugo work in different ways: GitHub pages uses information from the master branch of the repository to build your website, while Hugo builds a website inside the public folder. The solution she presents in her tutorial creates a sub branch within GitHub. She provides some shell scripts written by &lt;a href=&#34;https://www.hjdskes.nl&#34;&gt;Jente Hidskes&lt;/a&gt; that create the sub branch and also update the site. These did not run for me for whatever reason – I believe Hidskes has written an updated tutorial to fix them, however.&lt;/p&gt;
&lt;p&gt;While I was reading the comments on Thomas’s tutorials to try to troubleshoot the shell script problems, I found a different &lt;a href=&#34;http://robertmyles.github.io/2017/02/01/how-to-make-a-github-pages-blog-with-rstudio-and-hugo/&#34;&gt;tutorial by Robert McDonnell&lt;/a&gt; that promised a more streamlined approach. McDonnell gets around the GitHub/Hugo conflicts by creating two GitHub repositories, one for the website (for example, my repo is called &lt;a href=&#34;https://github.com/babichmorrowc/babichmorrowc.github.io&#34;&gt;babichmorrowc.github.io&lt;/a&gt;) and one for all of the Hugo and &lt;code&gt;blogdown&lt;/code&gt; content (mine is called &lt;a href=&#34;https://github.com/babichmorrowc/website-hugo&#34;&gt;website-hugo&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To link these two repositories, Thomas has users create a &lt;a href=&#34;https://blog.github.com/2016-02-01-working-with-submodules/&#34;&gt;Git Submodule&lt;/a&gt; using the following code:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git submodule add -b master git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is where, once again, I ran into difficulties. I kept getting the error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Cloning into &amp;#39;&amp;lt;filepath&amp;gt;/website-hugo/public&amp;#39;...
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of &amp;#39;git@github.com:babichmorrowc/babichmorrowc.github.io.git&amp;#39; into submodule path &amp;#39;&amp;lt;filepath&amp;gt;/website-hugo/public&amp;#39; failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fortunately, there turned out to be an easy fix for this – the code McDonnell provides uses the SSH URL, which is something I do not have set up. I replaced it with the HTTPS URL (code below), and went on my merry way.&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;git submodule add -b master https://github.com/babichmorrowc/babichmorrowc.github.io.git public&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pushing-to-github&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Pushing to GitHub&lt;/h2&gt;
&lt;p&gt;From that point forward, I had a functioning site that I could preview in RStudio using the &lt;code&gt;serve_site()&lt;/code&gt; function. Using the following Git commands, I could push those changes and get that same site up and running online:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# From the folder for the repo website-hugo
cd public
git add .
git commit -m &amp;quot;new commit!&amp;quot;
git push origin master

cd ..
git add .
git commit -m &amp;quot;new commit part 2&amp;quot;
git push&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;editing-my-site&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Editing my site&lt;/h2&gt;
&lt;p&gt;I’m still learning my way around the format of the Hugo site, but by some trial and error I’ve started the process of customizing the site. I am using the &lt;a href=&#34;https://themes.gohugo.io/academic/&#34;&gt;Academic&lt;/a&gt; theme. So far I’ve managed to update my bio, add a publication, and take a stab at creating projects. As I get more familiarity with the format, I will try for a more comprehensive blog post explaining how to add your own content.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Distribution modeling of Bradypus</title>
      <link>/project/bradypus/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 -0400</pubDate>
      <guid>/project/bradypus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 -0400</pubDate>
      <guid>/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk: Macroevolution of dimensionless life history metrics in tetrapods</title>
      <link>/talk/honors_presentation_2018/</link>
      <pubDate>Tue, 01 May 2018 13:00:00 -0400</pubDate>
      <guid>/talk/honors_presentation_2018/</guid>
      <description>&lt;p&gt;&lt;iframe src=&#34;https://docs.google.com/presentation/d/e/2PACX-1vTsSj-oftLksGEKTkzCoBSIpzooO61ZMGAUzoGBv7u20OzMQK8ctX3gCpWTMm4UowrrWumFrdQsY0Cd/embed?start=false&amp;loop=false&amp;delayms=5000&#34; frameborder=&#34;0&#34; width=&#34;800&#34; height=&#34;600&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Poster: Macroevolution of dimensionless life histories in amniotes</title>
      <link>/talk/tree_2017/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 -0400</pubDate>
      <guid>/talk/tree_2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>New approaches for delineating n‐dimensional hypervolumes</title>
      <link>/publication/hypervolumes/</link>
      <pubDate>Wed, 09 Aug 2017 00:00:00 -0400</pubDate>
      <guid>/publication/hypervolumes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Poster: Quantifying species tolerances and functional diversity using n-dimensional hypervolumes: a comparison of methods</title>
      <link>/talk/ibs_2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0500</pubDate>
      <guid>/talk/ibs_2017/</guid>
      <description>&lt;p&gt;This poster was made using version 1.4.6 of the &lt;code&gt;hypervolume&lt;/code&gt; R package. These results should not be considered representative of the current algorithms in the package - to see current algorithm performance, refer to &lt;a href=&#34;https://babichmorrowc.github.io/publication/hypervolumes/&#34; target=&#34;_blank&#34;&gt;Blonder &lt;em&gt;et al.&lt;/em&gt; 2017&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hypervolume package testing</title>
      <link>/project/hypervolumes/</link>
      <pubDate>Wed, 27 Jul 2016 00:00:00 -0400</pubDate>
      <guid>/project/hypervolumes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      <guid>/about/</guid>
      <description>&lt;p&gt;This is a &amp;ldquo;hello world&amp;rdquo; example website for the &lt;a href=&#34;https://github.com/rstudio/blogdown&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; package. The theme was forked from &lt;a href=&#34;https://github.com/jrutheiser/hugo-lithium-theme&#34; target=&#34;_blank&#34;&gt;@jrutheiser/hugo-lithium-theme&lt;/a&gt; and modified by &lt;a href=&#34;https://github.com/yihui/hugo-lithium&#34; target=&#34;_blank&#34;&gt;Yihui Xie&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tetrapod life history traits</title>
      <link>/project/life_history/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 -0400</pubDate>
      <guid>/project/life_history/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/google7f36843d88791048/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/google7f36843d88791048/</guid>
      <description>google-site-verification: google7f36843d88791048.html</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
