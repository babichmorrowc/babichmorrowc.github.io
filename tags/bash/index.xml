<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash | Cecina Babich Morrow</title>
    <link>/tags/bash/</link>
      <atom:link href="/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    <description>bash</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2022</copyright><lastBuildDate>Thu, 23 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>bash</title>
      <link>/tags/bash/</link>
    </image>
    
    <item>
      <title>Scheduling R Scripts</title>
      <link>/post/launchd-jobs/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/launchd-jobs/</guid>
      <description>


&lt;div id=&#34;inspiration-for-this-post&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inspiration for this post&lt;/h2&gt;
&lt;p&gt;Since starting my job as a data scientist, I found myself setting dozens of reminders on my calendar to run certain scripts every day / week / month. I figured that there had to be a better way to deal with this, and after some research, I started off with creating cron jobs. After a few months of these running (with varying success), I learned about Launchd as well. This post will explain my process for using both of these scheduling tools to run R scripts at scheduled times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;cron&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Cron&lt;/h2&gt;
&lt;p&gt;Cron is a utility in Unix-like operating systems that can schedule a command to run automatically at a scheduled time. Cron is driven by a crontab file, so in order to schedule an R script, I needed to create a crontab file. Each line of a crontab file has the following syntax:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12)
# │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday;
# │ │ │ │ │                                   7 is also Sunday on some systems)
# │ │ │ │ │
# │ │ │ │ │
# * * * * * command to execute&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any of the time arguments that are left as &lt;code&gt;*&lt;/code&gt; are treated as a wildcard, so if you schedule &lt;code&gt;20 10 3 * * command to execute&lt;/code&gt;, that command will run at 10:20 on the 3rd of every month.&lt;/p&gt;
&lt;p&gt;Beyond figuring out the timing of your job, you also need to figure out what command to execute. Since my work is primarily in R, I wanted to figure out how to execute an R script via cron. If the script in question can be found at &lt;code&gt;/Desktop/my_script.R&lt;/code&gt;, for example, the command will be:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;/usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can test this by running just this command in Terminal (without worrying about cron yet) and seeing if your script runs.&lt;/p&gt;
&lt;p&gt;So now, you can assemble the syntax for the cron job. If you want &lt;code&gt;myscript.R&lt;/code&gt; to run at 10:20 on the 3rd of every month, the cron syntax will be:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;20 10 3 * * /usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check your syntax using &lt;a href=&#34;https://crontab-generator.org/&#34;&gt;this handy website&lt;/a&gt;, which helps you generate the proper cron syntax given a desired schedule and script.&lt;/p&gt;
&lt;p&gt;Once you have your script running and the syntax ready for the schedule you want, you are ready to edit the crontab on your computer. To do so, open up Terminal and run:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;crontab -e&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you type &lt;code&gt;i&lt;/code&gt;, you will enter insert mode, and you can paste your cron sytax into the file. When you are done editing, hit &lt;code&gt;ESC&lt;/code&gt; and then type &lt;code&gt;:wq&lt;/code&gt; to save and quit.&lt;/p&gt;
&lt;div id=&#34;emailing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Emailing&lt;/h3&gt;
&lt;p&gt;When I created my first cron job, I was pretty skeptical about the likelihood of it actually running when scheduled, so I wanted to add the ability to get an email about the script’s progress. To do that, you can add to the &lt;code&gt;MAILTO&lt;/code&gt; option, so your crontab would look like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;MAILTO=&amp;quot;myemail@email.com;mybackupemail@gmail.com&amp;quot;
20 10 3 * * /usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will email you on successful runs of the script as well as errors, so if your script is set up to run hourly, you might not want all those emails. &lt;a href=&#34;https://stevenmortimer.com/automating-r-scripts-with-cron/&#34;&gt;This blog post&lt;/a&gt; includes lots of additional helpful information about automating R scripts with cron, including how to receive emails for errors only.&lt;/p&gt;
&lt;p&gt;As far as my experiences with cron go, I did not always receive the emails, even if the script did in fact run properly. I seemed to only receive the emails while I was at work, not at home (no idea why that happened or if there was any causal reason for it). Beyond this weirdness, the main issue with cron is that your jobs will not run if your computer is asleep at the scheduled time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;launchd&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Launchd&lt;/h2&gt;
&lt;p&gt;After some of these various frustrations with cron, I learned that launchd is the preferred tool in macOS to execute scripts in a scheduled way. If your computer is asleep when the scheduled job is supposed to occur, the job will still run when your computer wakes up. (If your machine is off at the scheduled time, however, the job will not run until the next scheduled time.) There’s a lot I don’t understand about launchd (for a great overview, check &lt;a href=&#34;https://medium.com/swlh/how-to-use-launchd-to-run-services-in-macos-b972ed1e352&#34;&gt;this Medium article&lt;/a&gt;), but I broke the process down into 3 steps:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Create a shell script to execute the R script&lt;/li&gt;
&lt;li&gt;Create a .plist file to schedule the running of the shell script&lt;/li&gt;
&lt;li&gt;Load the job&lt;/li&gt;
&lt;/ol&gt;
&lt;div id=&#34;create-the-shell-script&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create the shell script&lt;/h3&gt;
&lt;p&gt;The shell script is basically going to look exactly the same as the command you would have used for the cron job. I saved these scripts in the &lt;code&gt;~/&lt;/code&gt; directory, although you can probably save them anywhere as long as you keep track of the paths. The shell script should look something like this:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;#!/bin/sh
/usr/local/bin/Rscript /Desktop/my_script.R&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first line &lt;code&gt;#!/bin/sh&lt;/code&gt; tells Unix how the file is supposed to be executed.&lt;/p&gt;
&lt;p&gt;Then run the following in terminal to make the shell file runnable:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;chmod +x launchd_shell_script.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-a-.plist-file&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create a .plist file&lt;/h3&gt;
&lt;p&gt;The .plist files that launchd uses are special XML files that allow you to specify the script to run and the schedule to run it on. I followed the following syntax for my .plist files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;
&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;dict&amp;gt;
    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;
    &amp;lt;!-- Should be the same as the filename without the extension --&amp;gt;
    &amp;lt;string&amp;gt;com.mylaunchjob&amp;lt;/string&amp;gt;
    &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;~/launchd_shell_script.sh&amp;lt;/string&amp;gt;
    &amp;lt;/array&amp;gt;
    &amp;lt;!-- Schedule regular runs --&amp;gt;
    &amp;lt;key&amp;gt;StartCalendarInterval&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;Hour&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;10&amp;lt;/integer&amp;gt;
        &amp;lt;key&amp;gt;Minute&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;20&amp;lt;/integer&amp;gt;
        &amp;lt;key&amp;gt;Day&amp;lt;/key&amp;gt;
        &amp;lt;integer&amp;gt;23&amp;lt;/integer&amp;gt;
    &amp;lt;/dict&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some components to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first string contains the name of the launch job in question (so this job would be saved as &lt;code&gt;com.mylaunchjob.plist&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Within the array, you need to put the name of the shell script you just created&lt;/li&gt;
&lt;li&gt;You can put the arguments to schedule the job under &lt;code&gt;StartCalendarInterval&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Save your &lt;code&gt;.plist&lt;/code&gt; file as &lt;code&gt;~/Library/LaunchAgents/com.mylaunchjob.plist&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-the-job&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Load the job&lt;/h3&gt;
&lt;p&gt;The final step is to run the following command in Terminal:&lt;/p&gt;
&lt;pre class=&#34;bash&#34;&gt;&lt;code&gt;launchctl load ~/Library/LaunchAgents/com.mylaunchjob.plist&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your job is now ready to go at the scheduled times.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-launchd-resources&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Additional launchd resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://willchernoff.com/2013/04/23/periodically-run-an-r-script-as-a-background-process-using-launchd-under-osx/&#34;&gt;Running RScripts using launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;General article about &lt;a href=&#34;https://nathangrigg.com/2012/07/schedule-jobs-using-launchd&#34;&gt;scheduling jobs using launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/how-to-use-launchd-to-run-services-in-macos-b972ed1e352&#34;&gt;Introduction to launchd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://killtheyak.com/schedule-jobs-launchd/&#34;&gt;Friendly guide to .plist format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
